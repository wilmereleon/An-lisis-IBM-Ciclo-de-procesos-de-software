#!/usr/bin/env python3
"""
üöÄ Generador de Diagramas Faltantes - M√°xima Calidad Python
üìä Figuras 2.1, 2.2, 2.3 y 3.2 para el an√°lisis IBM
üéØ Universidad Polit√©cnico Grancolombiano - Semestre 7
üìã Curso: Pruebas y Calidad de Software

Genera diagramas de m√°xima calidad (300 DPI) usando las mejores librer√≠as de Python
para reemplazar diagramas faltantes o rotos en el documento acad√©mico.
"""

import matplotlib
matplotlib.use('Agg')  # Usar backend sin interfaz gr√°fica
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import pandas as pd
import seaborn as sns
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# üé® Paleta de colores IBM corporativa
IBM_COLORS = {
    'blue': '#1F70C1',
    'green': '#198038', 
    'red': '#DA1E28',
    'yellow': '#F1C21B',
    'purple': '#8A3FFC',
    'teal': '#009D9A',
    'orange': '#FF832B',
    'gray': '#525252',
    'light_blue': '#4589FF',
    'light_gray': '#F4F4F4',
    'dark_gray': '#2D2D2D',
    'white': '#FFFFFF'
}

def configurar_matplotlib():
    """‚öôÔ∏è Configuraci√≥n global para m√°xima calidad visual"""
    plt.style.use('default')
    plt.rcParams.update({
        'font.family': ['Arial', 'DejaVu Sans', 'Liberation Sans'],
        'font.size': 10,
        'axes.titlesize': 12,
        'axes.labelsize': 10,
        'xtick.labelsize': 9,
        'ytick.labelsize': 9,
        'legend.fontsize': 9,
        'figure.titlesize': 14,
        'figure.dpi': 300,
        'savefig.dpi': 300,
        'savefig.bbox': 'tight',
        'savefig.facecolor': 'white',
        'axes.grid': True,
        'grid.alpha': 0.3,
        'axes.spines.top': False,
        'axes.spines.right': False,
        'axes.edgecolor': IBM_COLORS['gray'],
        'grid.color': IBM_COLORS['light_gray']
    })

def generar_figura_2_1_seleccion_estrategica():
    """
    üìä Figura 2.1: Selecci√≥n estrat√©gica de modelos basada en criterios ponderados
    """
    print("‚ú® Generando Figura 2.1 - Selecci√≥n Estrat√©gica de Modelos...")
    
    # Datos de evaluaci√≥n cuantitativa por modelo
    modelos = ['CMMI', 'TMMi', 'ISO/IEC 29119', 'ISO/IEC 25010', 'ITIL', 'Six Sigma']
    
    # Criterios de evaluaci√≥n con pesos espec√≠ficos
    criterios = {
        'Madurez Organizacional': [9, 8, 7, 6, 7, 8],
        'Especificidad Testing': [7, 10, 9, 8, 5, 6],
        'Integraci√≥n Empresarial': [10, 7, 8, 7, 9, 7],
        'M√©tricas Cuantificables': [8, 9, 8, 9, 7, 10],
        'Escalabilidad IBM': [9, 8, 9, 8, 8, 7],
        'Costo-Beneficio': [7, 8, 9, 8, 9, 6],
        'Tiempo Implementaci√≥n': [6, 7, 8, 9, 7, 8]
    }
    
    # Calcular scores ponderados (pesos relativos por criterio)
    pesos = [0.2, 0.25, 0.15, 0.15, 0.1, 0.1, 0.05]
    scores_finales = []
    
    for i, modelo in enumerate(modelos):
        score = sum(criterios[criterio][i] * peso for criterio, peso in zip(criterios.keys(), pesos))
        scores_finales.append(score)
    
    # Crear figura principal
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('üèÜ Selecci√≥n Estrat√©gica de Modelos de Calidad para IBM', 
                fontsize=16, fontweight='bold', color=IBM_COLORS['dark_gray'], y=0.95)
    
    # üìä Gr√°fico 1: Ranking final de modelos
    colores_ranking = [IBM_COLORS['blue'], IBM_COLORS['green'], IBM_COLORS['teal'], 
                      IBM_COLORS['purple'], IBM_COLORS['orange'], IBM_COLORS['yellow']]
    
    sorted_data = sorted(zip(modelos, scores_finales, colores_ranking), key=lambda x: x[1], reverse=True)
    modelos_sorted, scores_sorted, colores_sorted = zip(*sorted_data)
    
    bars1 = ax1.barh(range(len(modelos_sorted)), scores_sorted, color=colores_sorted, alpha=0.8, edgecolor='white', linewidth=2)
    ax1.set_yticks(range(len(modelos_sorted)))
    ax1.set_yticklabels(modelos_sorted, fontweight='bold')
    ax1.set_xlabel('Score Ponderado (0-10)', fontweight='bold')
    ax1.set_title('ü•á Ranking Final de Modelos', fontweight='bold', color=IBM_COLORS['blue'])
    
    # A√±adir valores en las barras
    for i, (bar, score) in enumerate(zip(bars1, scores_sorted)):
        ax1.text(score + 0.1, bar.get_y() + bar.get_height()/2, 
                f'{score:.2f}', va='center', fontweight='bold', color=IBM_COLORS['dark_gray'])
    
    ax1.set_xlim(0, 10)
    ax1.grid(True, alpha=0.3)
    
    # üìä Gr√°fico 2: Matriz de criterios (heatmap)
    df_criterios = pd.DataFrame(criterios, index=modelos)
    im = ax2.imshow(df_criterios.values, cmap='RdYlBu_r', aspect='auto', vmin=0, vmax=10)
    ax2.set_xticks(range(len(criterios)))
    ax2.set_xticklabels(list(criterios.keys()), rotation=45, ha='right')
    ax2.set_yticks(range(len(modelos)))
    ax2.set_yticklabels(modelos)
    ax2.set_title('üéØ Matriz de Evaluaci√≥n por Criterios', fontweight='bold', color=IBM_COLORS['green'])
    
    # A√±adir valores en la matriz
    for i in range(len(modelos)):
        for j in range(len(criterios)):
            ax2.text(j, i, f'{df_criterios.iloc[i, j]}', ha='center', va='center', 
                    fontweight='bold', color='white' if df_criterios.iloc[i, j] > 5 else 'black')
    
    # üìä Gr√°fico 3: Estrategia de integraci√≥n recomendada
    estrategia_niveles = ['Foundation\n(ISO/IEC 29119)', 'Organizational\n(CMMI)', 
                         'Specialization\n(TMMi)', 'Quality Attributes\n(ISO/IEC 25010)']
    niveles_y = [0.8, 0.6, 0.4, 0.2]
    colores_estrategia = [IBM_COLORS['teal'], IBM_COLORS['blue'], IBM_COLORS['green'], IBM_COLORS['purple']]
    
    ax3.barh(niveles_y, [0.9, 0.95, 0.85, 0.75], height=0.15, 
            color=colores_estrategia, alpha=0.8, edgecolor='white', linewidth=2)
    
    ax3.set_yticks(niveles_y)
    ax3.set_yticklabels(estrategia_niveles, fontweight='bold')
    ax3.set_xlabel('Nivel de Implementaci√≥n', fontweight='bold')
    ax3.set_title('üèóÔ∏è Estrategia de Integraci√≥n por Capas', fontweight='bold', color=IBM_COLORS['purple'])
    ax3.set_xlim(0, 1)
    
    # üìä Gr√°fico 4: Timeline de implementaci√≥n
    fases = ['Q1 2025\nAn√°lisis', 'Q2 2025\nDise√±o', 'Q3-Q4 2025\nImplementaci√≥n', 'Q1 2026\nOptimizaci√≥n']
    timeline_x = range(len(fases))
    timeline_y = [8.5, 9.0, 8.8, 9.2]
    
    ax4.plot(timeline_x, timeline_y, marker='o', linewidth=3, markersize=10, 
            color=IBM_COLORS['blue'], markerfacecolor=IBM_COLORS['yellow'], markeredgewidth=2)
    ax4.fill_between(timeline_x, timeline_y, alpha=0.3, color=IBM_COLORS['blue'])
    
    ax4.set_xticks(timeline_x)
    ax4.set_xticklabels(fases, fontweight='bold')
    ax4.set_ylabel('Madurez Esperada', fontweight='bold')
    ax4.set_title('üìÖ Timeline de Madurez Organizacional', fontweight='bold', color=IBM_COLORS['red'])
    ax4.set_ylim(8, 10)
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout(rect=[0, 0.03, 1, 0.93])
    
    # üíæ Guardar con m√°xima calidad
    output_path = Path('diagrams/seleccion-estrategica-modelos-python.png')
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white', edgecolor='none')
    print(f"‚úÖ Figura 2.1 guardado en: {output_path}")
    plt.close()

def generar_figura_2_2_evaluacion_cuantitativa():
    """
    üìä Figura 2.2: Evaluaci√≥n cuantitativa basada en criterios ponderados
    """
    print("‚ú® Generando Figura 2.2 - Evaluaci√≥n Cuantitativa...")
    
    # Datos detallados de evaluaci√≥n
    modelos = ['CMMI', 'TMMi', 'ISO/IEC\n29119', 'ISO/IEC\n25010', 'ITIL', 'Six Sigma']
    
    # M√©tricas cuantitativas espec√≠ficas
    metricas = {
        'ROI Estimado (%)': [25, 30, 20, 15, 18, 35],
        'Tiempo Impl. (meses)': [18, 12, 8, 6, 10, 14],
        'Complejidad (1-10)': [9, 7, 6, 5, 7, 8],
        'Costo ($K)': [800, 500, 300, 200, 400, 600],
        'Cobertura Testing (%)': [70, 95, 85, 60, 40, 55],
        'Madurez Actual IBM (1-5)': [3, 2, 2, 3, 4, 2]
    }
    
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('üìä Evaluaci√≥n Cuantitativa de Modelos de Calidad', 
                fontsize=16, fontweight='bold', color=IBM_COLORS['dark_gray'], y=0.95)
    
    # üìä Gr√°fico 1: ROI vs Tiempo de Implementaci√≥n
    colores = [IBM_COLORS['blue'], IBM_COLORS['green'], IBM_COLORS['teal'], 
              IBM_COLORS['purple'], IBM_COLORS['orange'], IBM_COLORS['red']]
    
    scatter = ax1.scatter(metricas['Tiempo Impl. (meses)'], metricas['ROI Estimado (%)'], 
                         s=[x*10 for x in metricas['Complejidad (1-10)']], 
                         c=colores, alpha=0.7, edgecolors='white', linewidth=2)
    
    for i, modelo in enumerate(modelos):
        ax1.annotate(modelo, (metricas['Tiempo Impl. (meses)'][i], metricas['ROI Estimado (%)'][i]),
                    xytext=(5, 5), textcoords='offset points', fontweight='bold', 
                    bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.8))
    
    ax1.set_xlabel('Tiempo de Implementaci√≥n (meses)', fontweight='bold')
    ax1.set_ylabel('ROI Estimado (%)', fontweight='bold')
    ax1.set_title('üí∞ ROI vs Tiempo de Implementaci√≥n', fontweight='bold', color=IBM_COLORS['green'])
    ax1.grid(True, alpha=0.3)
    
    # üìä Gr√°fico 2: Cobertura de Testing
    bars2 = ax2.bar(range(len(modelos)), metricas['Cobertura Testing (%)'], 
                   color=colores, alpha=0.8, edgecolor='white', linewidth=2)
    ax2.set_xticks(range(len(modelos)))
    ax2.set_xticklabels(modelos, rotation=45, ha='right')
    ax2.set_ylabel('Cobertura de Testing (%)', fontweight='bold')
    ax2.set_title('üéØ Cobertura de Testing por Modelo', fontweight='bold', color=IBM_COLORS['blue'])
    
    # A√±adir valores en las barras
    for bar, valor in zip(bars2, metricas['Cobertura Testing (%)']):
        ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1, 
                f'{valor}%', ha='center', fontweight='bold')
    
    # L√≠nea objetivo
    ax2.axhline(y=80, color=IBM_COLORS['red'], linestyle='--', linewidth=2, label='Objetivo IBM (80%)')
    ax2.legend()
    ax2.set_ylim(0, 100)
    
    # üìä Gr√°fico 3: An√°lisis costo-beneficio
    # Normalizar costos para mejor visualizaci√≥n
    costos_norm = [x/100 for x in metricas['Costo ($K)']]
    
    bars3 = ax3.bar(range(len(modelos)), costos_norm, color=colores, alpha=0.6, 
                   label='Costo (x100K)', edgecolor='white', linewidth=2)
    
    # L√≠nea de ROI
    ax3_twin = ax3.twinx()
    line = ax3_twin.plot(range(len(modelos)), metricas['ROI Estimado (%)'], 
                        color=IBM_COLORS['red'], marker='o', linewidth=3, markersize=8, 
                        label='ROI %', markerfacecolor=IBM_COLORS['yellow'])
    
    ax3.set_xticks(range(len(modelos)))
    ax3.set_xticklabels(modelos, rotation=45, ha='right')
    ax3.set_ylabel('Costo de Implementaci√≥n (x100K USD)', fontweight='bold', color=IBM_COLORS['blue'])
    ax3_twin.set_ylabel('ROI Estimado (%)', fontweight='bold', color=IBM_COLORS['red'])
    ax3.set_title('üíº An√°lisis Costo-Beneficio', fontweight='bold', color=IBM_COLORS['purple'])
    
    # Leyendas
    ax3.legend(loc='upper left')
    ax3_twin.legend(loc='upper right')
    
    # üìä Gr√°fico 4: Matriz de madurez actual vs objetivo
    madurez_objetivo = [4, 4, 3, 4, 4, 3]  # Niveles objetivo para IBM
    
    x_pos = np.arange(len(modelos))
    width = 0.35
    
    bars4_actual = ax4.bar(x_pos - width/2, metricas['Madurez Actual IBM (1-5)'], 
                          width, label='Madurez Actual', color=IBM_COLORS['light_blue'], 
                          alpha=0.8, edgecolor='white', linewidth=2)
    bars4_objetivo = ax4.bar(x_pos + width/2, madurez_objetivo, 
                           width, label='Madurez Objetivo', color=IBM_COLORS['green'], 
                           alpha=0.8, edgecolor='white', linewidth=2)
    
    ax4.set_xlabel('Modelos de Calidad', fontweight='bold')
    ax4.set_ylabel('Nivel de Madurez (1-5)', fontweight='bold')
    ax4.set_title('üìà Madurez Actual vs Objetivo IBM', fontweight='bold', color=IBM_COLORS['teal'])
    ax4.set_xticks(x_pos)
    ax4.set_xticklabels(modelos, rotation=45, ha='right')
    ax4.legend()
    ax4.set_ylim(0, 5)
    
    # A√±adir valores en las barras
    for bars in [bars4_actual, bars4_objetivo]:
        for bar in bars:
            height = bar.get_height()
            ax4.text(bar.get_x() + bar.get_width()/2., height + 0.05,
                    f'{height}', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout(rect=[0, 0.03, 1, 0.93])
    
    # üíæ Guardar con m√°xima calidad
    output_path = Path('diagrams/evaluacion-cuantitativa-python.png')
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white', edgecolor='none')
    print(f"‚úÖ Figura 2.2 guardado en: {output_path}")
    plt.close()

def generar_figura_2_3_pros_contras():
    """
    üìä Figura 2.3: An√°lisis de ventajas y desventajas por modelo
    """
    print("‚ú® Generando Figura 2.3 - An√°lisis Pros y Contras...")
    
    # Datos de pros y contras por modelo
    modelos_data = {
        'CMMI': {
            'pros': ['Madurez organizacional integral', 'Procesos bien definidos', 'Reconocimiento internacional', 'Escalabilidad enterprise'],
            'contras': ['Alto costo implementaci√≥n', 'Complejidad inicial', 'Tiempo largo ROI', 'Requiere cultura cambio'],
            'score_pros': 8.5,
            'score_contras': 6.8,
            'color': IBM_COLORS['blue']
        },
        'TMMi': {
            'pros': ['Especializaci√≥n testing', 'Sinergia con CMMI', 'M√©tricas espec√≠ficas', 'Mejora calidad producto'],
            'contras': ['Scope limitado', 'Dependiente CMMI', 'Menos reconocimiento', 'Curva aprendizaje'],
            'score_pros': 9.2,
            'score_contras': 5.5,
            'color': IBM_COLORS['green']
        },
        'ISO/IEC 29119': {
            'pros': ['Est√°ndar moderno', 'Plantillas ready-to-use', 'Flexibilidad implementaci√≥n', 'Costo-beneficio √≥ptimo'],
            'contras': ['Menos maduro', 'Adopci√≥n limitada', 'Falta integraci√≥n org', 'Documentaci√≥n compleja'],
            'score_pros': 8.0,
            'score_contras': 6.2,
            'color': IBM_COLORS['teal']
        },
        'ISO/IEC 25010': {
            'pros': ['Atributos calidad claros', 'Evaluaci√≥n sistem√°tica', 'Base para m√©tricas', 'Est√°ndar internacional'],
            'contras': ['No es framework completo', 'Falta procesos operativos', 'Implementaci√≥n parcial', 'Limitado a atributos'],
            'score_pros': 7.5,
            'score_contras': 7.0,
            'color': IBM_COLORS['purple']
        },
        'ITIL': {
            'pros': ['Gesti√≥n servicios madura', 'Alineaci√≥n business', 'Procesos post-producci√≥n', 'Amplia adopci√≥n'],
            'contras': ['Limitado a operaciones', 'No cubre desarrollo', 'Complejidad governance', 'Costo licenciamiento'],
            'score_pros': 7.8,
            'score_contras': 6.5,
            'color': IBM_COLORS['orange']
        },
        'Six Sigma': {
            'pros': ['ROI comprobado alto', 'Mejora procesos espec√≠ficos', 'Metodolog√≠a estad√≠stica', 'Resultados medibles'],
            'contras': ['Scope muy espec√≠fico', 'No framework integral', 'Cultura resistencia', 'Limitado a procesos'],
            'score_pros': 8.8,
            'score_contras': 7.2,
            'color': IBM_COLORS['red']
        }
    }
    
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(18, 14))
    fig.suptitle('‚öñÔ∏è An√°lisis Comparativo: Ventajas vs Desventajas por Modelo', 
                fontsize=16, fontweight='bold', color=IBM_COLORS['dark_gray'], y=0.95)
    
    # üìä Gr√°fico 1: Scores de Pros vs Contras
    modelos = list(modelos_data.keys())
    scores_pros = [modelos_data[m]['score_pros'] for m in modelos]
    scores_contras = [modelos_data[m]['score_contras'] for m in modelos]
    colores = [modelos_data[m]['color'] for m in modelos]
    
    scatter = ax1.scatter(scores_contras, scores_pros, s=300, c=colores, alpha=0.7, 
                         edgecolors='white', linewidth=3)
    
    for i, modelo in enumerate(modelos):
        ax1.annotate(modelo, (scores_contras[i], scores_pros[i]), 
                    xytext=(10, 10), textcoords='offset points', fontweight='bold',
                    bbox=dict(boxstyle='round,pad=0.5', facecolor='white', alpha=0.9, edgecolor=colores[i]))
    
    # L√≠neas de referencia
    ax1.axhline(y=8, color=IBM_COLORS['green'], linestyle='--', alpha=0.7, label='Pros Alto (8+)')
    ax1.axvline(x=6.5, color=IBM_COLORS['red'], linestyle='--', alpha=0.7, label='Contras Moderado (6.5+)')
    
    ax1.set_xlabel('Score Contras (menor es mejor)', fontweight='bold')
    ax1.set_ylabel('Score Pros (mayor es mejor)', fontweight='bold')
    ax1.set_title('üéØ Pros vs Contras Score Matrix', fontweight='bold', color=IBM_COLORS['blue'])
    ax1.legend()
    ax1.grid(True, alpha=0.3)
    ax1.set_xlim(5, 8)
    ax1.set_ylim(7, 10)
    
    # üìä Gr√°fico 2: Balance neto (Pros - Contras)
    balance_neto = [scores_pros[i] - scores_contras[i] for i in range(len(modelos))]
    
    # Ordenar por balance neto
    sorted_data = sorted(zip(modelos, balance_neto, colores), key=lambda x: x[1], reverse=True)
    modelos_sorted, balance_sorted, colores_sorted = zip(*sorted_data)
    
    bars2 = ax2.barh(range(len(modelos_sorted)), balance_sorted, color=colores_sorted, 
                    alpha=0.8, edgecolor='white', linewidth=2)
    
    ax2.set_yticks(range(len(modelos_sorted)))
    ax2.set_yticklabels(modelos_sorted, fontweight='bold')
    ax2.set_xlabel('Balance Neto (Pros - Contras)', fontweight='bold')
    ax2.set_title('üìä Ranking por Balance Neto', fontweight='bold', color=IBM_COLORS['green'])
    
    # A√±adir valores
    for i, (bar, balance) in enumerate(zip(bars2, balance_sorted)):
        ax2.text(balance + 0.05 if balance > 0 else balance - 0.05, bar.get_y() + bar.get_height()/2, 
                f'{balance:.1f}', va='center', fontweight='bold', 
                ha='left' if balance > 0 else 'right')
    
    ax2.axvline(x=0, color=IBM_COLORS['gray'], linestyle='-', alpha=0.5)
    ax2.grid(True, alpha=0.3)
    
    # üìä Gr√°fico 3: Matriz detallada de caracter√≠sticas
    # Crear matriz de pros y contras cuantificada
    caracteristicas = ['Madurez', 'Costo', 'Complejidad', 'ROI', 'Cobertura', 'Escalabilidad']
    
    # Scores sint√©ticos para visualizaci√≥n
    matriz_scores = np.array([
        [9, 6, 8, 7, 7, 9],  # CMMI
        [8, 7, 6, 8, 10, 7], # TMMi  
        [7, 8, 6, 8, 8, 8],  # ISO/IEC 29119
        [6, 9, 5, 7, 6, 7],  # ISO/IEC 25010
        [8, 7, 7, 7, 4, 8],  # ITIL
        [7, 6, 8, 9, 6, 6]   # Six Sigma
    ])
    
    im = ax3.imshow(matriz_scores, cmap='RdYlGn', aspect='auto', vmin=0, vmax=10)
    ax3.set_xticks(range(len(caracteristicas)))
    ax3.set_xticklabels(caracteristicas, rotation=45, ha='right', fontweight='bold')
    ax3.set_yticks(range(len(modelos)))
    ax3.set_yticklabels(modelos, fontweight='bold')
    ax3.set_title('üé® Matriz de Caracter√≠sticas Detallada', fontweight='bold', color=IBM_COLORS['purple'])
    
    # A√±adir valores en la matriz
    for i in range(len(modelos)):
        for j in range(len(caracteristicas)):
            color = 'white' if matriz_scores[i, j] > 5 else 'black'
            ax3.text(j, i, f'{matriz_scores[i, j]}', ha='center', va='center', 
                    fontweight='bold', color=color)
    
    # Colorbar
    cbar = plt.colorbar(im, ax=ax3, shrink=0.8)
    cbar.set_label('Score (0-10)', fontweight='bold')
    
    # üìä Gr√°fico 4: Recomendaci√≥n estrat√©gica visual
    # Crear diagrama de recomendaci√≥n con texto e iconos
    ax4.set_xlim(0, 10)
    ax4.set_ylim(0, 10)
    ax4.axis('off')
    
    # T√≠tulo
    ax4.text(5, 9.5, 'üèÜ RECOMENDACI√ìN ESTRAT√âGICA IBM', 
            ha='center', va='center', fontsize=14, fontweight='bold', 
            color=IBM_COLORS['blue'])
    
    # Modelos primarios
    rect1 = patches.Rectangle((0.5, 7), 9, 1.5, linewidth=3, 
                             edgecolor=IBM_COLORS['blue'], facecolor=IBM_COLORS['blue'], alpha=0.2)
    ax4.add_patch(rect1)
    ax4.text(5, 7.75, 'ü•á MODELOS PRIMARIOS: CMMI + TMMi', 
            ha='center', va='center', fontsize=12, fontweight='bold')
    ax4.text(5, 7.25, 'Sinergia comprobada | Madurez integral + Testing especializado', 
            ha='center', va='center', fontsize=10, style='italic')
    
    # Frameworks complementarios  
    rect2 = patches.Rectangle((0.5, 5), 9, 1.5, linewidth=3, 
                             edgecolor=IBM_COLORS['green'], facecolor=IBM_COLORS['green'], alpha=0.2)
    ax4.add_patch(rect2)
    ax4.text(5, 5.75, 'ü•à FRAMEWORKS COMPLEMENTARIOS: ISO/IEC 29119 + 25010', 
            ha='center', va='center', fontsize=12, fontweight='bold')
    ax4.text(5, 5.25, 'Plantillas ready-to-use | Atributos de calidad medibles', 
            ha='center', va='center', fontsize=10, style='italic')
    
    # Modelos de soporte
    rect3 = patches.Rectangle((0.5, 3), 9, 1.5, linewidth=3, 
                             edgecolor=IBM_COLORS['orange'], facecolor=IBM_COLORS['orange'], alpha=0.2)
    ax4.add_patch(rect3)
    ax4.text(5, 3.75, 'ü•â MODELOS DE SOPORTE: ITIL + Six Sigma', 
            ha='center', va='center', fontsize=12, fontweight='bold')
    ax4.text(5, 3.25, 'Post-producci√≥n | Mejora procesos espec√≠ficos con ROI alto', 
            ha='center', va='center', fontsize=10, style='italic')
    
    # Timeline
    ax4.text(5, 2, '‚è±Ô∏è TIMELINE: Q1 2025 - Q1 2026 (Implementaci√≥n progresiva)', 
            ha='center', va='center', fontsize=11, fontweight='bold', color=IBM_COLORS['red'])
    
    # ROI estimado
    ax4.text(5, 1, 'üí∞ ROI CONSOLIDADO: 28-35% a 24 meses', 
            ha='center', va='center', fontsize=11, fontweight='bold', color=IBM_COLORS['green'])
    
    plt.tight_layout(rect=[0, 0.03, 1, 0.93])
    
    # üíæ Guardar con m√°xima calidad
    output_path = Path('diagrams/pros-contras-modelos-python.png')
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white', edgecolor='none')
    print(f"‚úÖ Figura 2.3 guardado en: {output_path}")
    plt.close()

def generar_figura_3_2_dofa_detallado():
    """
    üìä Figura 3.2: An√°lisis DOFA detallado con factores espec√≠ficos cuantificados
    """
    print("‚ú® Generando Figura 3.2 - An√°lisis DOFA Detallado...")
    
    # Datos cuantificados del an√°lisis DOFA para IBM
    dofa_data = {
        'Fortalezas': {
            'factores': [
                'Liderazgo tecnol√≥gico global',
                'Infraestructura cloud robusta',
                'Cultura de calidad establecida', 
                'Inversi√≥n I+D+i (5.1B USD)',
                'Portfolio diversificado',
                'Recursos humanos especializados',
                'Partnerships estrat√©gicos',
                'Presencia multinacional'
            ],
            'impacto': [9.5, 9.0, 8.5, 9.2, 8.8, 8.7, 8.3, 9.1],
            'facilidad': [8.0, 9.5, 7.5, 8.8, 8.0, 8.5, 9.0, 8.2],
            'color': IBM_COLORS['green']
        },
        'Oportunidades': {
            'factores': [
                'Mercado DevOps/Testing creciente',
                'Adopci√≥n cloud empresarial',
                'Normativas calidad emergentes',
                'Transformaci√≥n digital acelerada',
                'IA aplicada a testing',
                'Automatizaci√≥n procesos',
                'Nuevos mercados verticales',
                'Est√°ndares ISO actualizados'
            ],
            'impacto': [9.3, 9.7, 8.2, 9.5, 9.8, 9.0, 8.5, 8.0],
            'probabilidad': [8.5, 9.2, 7.8, 9.0, 8.8, 8.7, 8.0, 8.3],
            'color': IBM_COLORS['blue']
        },
        'Debilidades': {
            'factores': [
                'Procesos testing no estandarizados',
                'Madurez CMMI nivel 3 actual',
                'Silos organizacionales',
                'Time-to-market lento',
                'Costos operativos altos',
                'Resistencia al cambio cultural',
                'Dependencia legacy systems',
                'M√©tricas calidad inconsistentes'
            ],
            'severidad': [8.8, 8.0, 7.5, 8.3, 7.8, 7.0, 8.5, 8.7],
            'urgencia': [9.0, 8.5, 7.0, 8.8, 6.5, 6.8, 7.5, 9.2],
            'color': IBM_COLORS['yellow']
        },
        'Amenazas': {
            'factores': [
                'Competencia cloud (AWS, Azure)',
                'Disrupci√≥n tecnol√≥gica acelerada',
                'Regulaciones compliance estrictas',
                'Talent shortage especializado',
                'Presi√≥n costos clientes',
                'Obsolescencia tecnol√≥gica',
                'Ciberseguridad creciente',
                'Cambios expectativas mercado'
            ],
            'probabilidad': [9.0, 8.5, 7.8, 8.8, 8.0, 7.5, 9.2, 8.3],
            'impacto': [9.5, 9.0, 8.2, 8.5, 7.8, 8.0, 9.3, 8.7],
            'color': IBM_COLORS['red']
        }
    }
    
    fig = plt.figure(figsize=(20, 16))
    gs = fig.add_gridspec(3, 3, height_ratios=[1, 1, 0.8], width_ratios=[1, 1, 1])
    
    fig.suptitle('üîç An√°lisis DOFA Detallado IBM - Factores Cuantificados', 
                fontsize=18, fontweight='bold', color=IBM_COLORS['dark_gray'], y=0.95)
    
    # üìä Cuadrante 1: Fortalezas
    ax1 = fig.add_subplot(gs[0, 0])
    
    fortalezas = dofa_data['Fortalezas']
    y_pos = np.arange(len(fortalezas['factores']))
    
    # Barras horizontales para impacto y facilidad
    bars_impacto = ax1.barh(y_pos - 0.2, fortalezas['impacto'], 0.4, 
                           label='Impacto', color=IBM_COLORS['green'], alpha=0.8)
    bars_facilidad = ax1.barh(y_pos + 0.2, fortalezas['facilidad'], 0.4, 
                             label='Facilidad', color=IBM_COLORS['light_blue'], alpha=0.8)
    
    ax1.set_yticks(y_pos)
    ax1.set_yticklabels([f[:25] + '...' if len(f) > 25 else f for f in fortalezas['factores']], fontsize=9)
    ax1.set_xlabel('Score (0-10)', fontweight='bold')
    ax1.set_title('üí™ FORTALEZAS', fontweight='bold', color=IBM_COLORS['green'], fontsize=14)
    ax1.legend(loc='lower right')
    ax1.set_xlim(0, 10)
    ax1.grid(True, alpha=0.3)
    
    # üìä Cuadrante 2: Oportunidades  
    ax2 = fig.add_subplot(gs[0, 1])
    
    oportunidades = dofa_data['Oportunidades']
    y_pos = np.arange(len(oportunidades['factores']))
    
    bars_imp_op = ax2.barh(y_pos - 0.2, oportunidades['impacto'], 0.4, 
                          label='Impacto', color=IBM_COLORS['blue'], alpha=0.8)
    bars_prob = ax2.barh(y_pos + 0.2, oportunidades['probabilidad'], 0.4, 
                        label='Probabilidad', color=IBM_COLORS['teal'], alpha=0.8)
    
    ax2.set_yticks(y_pos)
    ax2.set_yticklabels([f[:25] + '...' if len(f) > 25 else f for f in oportunidades['factores']], fontsize=9)
    ax2.set_xlabel('Score (0-10)', fontweight='bold')
    ax2.set_title('üöÄ OPORTUNIDADES', fontweight='bold', color=IBM_COLORS['blue'], fontsize=14)
    ax2.legend(loc='lower right')
    ax2.set_xlim(0, 10)
    ax2.grid(True, alpha=0.3)
    
    # üìä Cuadrante 3: Debilidades
    ax3 = fig.add_subplot(gs[1, 0])
    
    debilidades = dofa_data['Debilidades']
    y_pos = np.arange(len(debilidades['factores']))
    
    bars_sev = ax3.barh(y_pos - 0.2, debilidades['severidad'], 0.4, 
                       label='Severidad', color=IBM_COLORS['yellow'], alpha=0.8)
    bars_urg = ax3.barh(y_pos + 0.2, debilidades['urgencia'], 0.4, 
                       label='Urgencia', color=IBM_COLORS['orange'], alpha=0.8)
    
    ax3.set_yticks(y_pos)
    ax3.set_yticklabels([f[:25] + '...' if len(f) > 25 else f for f in debilidades['factores']], fontsize=9)
    ax3.set_xlabel('Score (0-10)', fontweight='bold')
    ax3.set_title('‚ö†Ô∏è DEBILIDADES', fontweight='bold', color=IBM_COLORS['yellow'], fontsize=14)
    ax3.legend(loc='lower right')
    ax3.set_xlim(0, 10)
    ax3.grid(True, alpha=0.3)
    
    # üìä Cuadrante 4: Amenazas
    ax4 = fig.add_subplot(gs[1, 1])
    
    amenazas = dofa_data['Amenazas']
    y_pos = np.arange(len(amenazas['factores']))
    
    bars_prob_am = ax4.barh(y_pos - 0.2, amenazas['probabilidad'], 0.4, 
                           label='Probabilidad', color=IBM_COLORS['red'], alpha=0.8)
    bars_imp_am = ax4.barh(y_pos + 0.2, amenazas['impacto'], 0.4, 
                          label='Impacto', color=IBM_COLORS['purple'], alpha=0.8)
    
    ax4.set_yticks(y_pos)
    ax4.set_yticklabels([f[:25] + '...' if len(f) > 25 else f for f in amenazas['factores']], fontsize=9)
    ax4.set_xlabel('Score (0-10)', fontweight='bold')
    ax4.set_title('‚ö° AMENAZAS', fontweight='bold', color=IBM_COLORS['red'], fontsize=14)
    ax4.legend(loc='lower right')
    ax4.set_xlim(0, 10)
    ax4.grid(True, alpha=0.3)
    
    # üìä Matriz de priorizaci√≥n (parte superior derecha)
    ax5 = fig.add_subplot(gs[0, 2])
    
    # Calcular scores consolidados
    score_fortalezas = [(imp + fac)/2 for imp, fac in zip(fortalezas['impacto'], fortalezas['facilidad'])]
    score_oportunidades = [(imp + prob)/2 for imp, prob in zip(oportunidades['impacto'], oportunidades['probabilidad'])]
    score_debilidades = [(sev + urg)/2 for sev, urg in zip(debilidades['severidad'], debilidades['urgencia'])]
    score_amenazas = [(prob + imp)/2 for prob, imp in zip(amenazas['probabilidad'], amenazas['impacto'])]
    
    # Promedios por categor√≠a
    avg_scores = [
        np.mean(score_fortalezas),
        np.mean(score_oportunidades), 
        np.mean(score_debilidades),
        np.mean(score_amenazas)
    ]
    
    categorias = ['Fortalezas', 'Oportunidades', 'Debilidades', 'Amenazas']
    colores_cat = [IBM_COLORS['green'], IBM_COLORS['blue'], IBM_COLORS['yellow'], IBM_COLORS['red']]
    
    bars5 = ax5.bar(categorias, avg_scores, color=colores_cat, alpha=0.8, edgecolor='white', linewidth=2)
    
    ax5.set_ylabel('Score Promedio (0-10)', fontweight='bold')
    ax5.set_title('üìä Scores Consolidados', fontweight='bold', color=IBM_COLORS['purple'], fontsize=14)
    ax5.set_ylim(0, 10)
    
    # A√±adir valores
    for bar, score in zip(bars5, avg_scores):
        ax5.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.1, 
                f'{score:.1f}', ha='center', fontweight='bold', fontsize=12)
    
    ax5.tick_params(axis='x', rotation=45)
    ax5.grid(True, alpha=0.3)
    
    # üìä Estrategias derivadas (parte inferior derecha)
    ax6 = fig.add_subplot(gs[1, 2])
    
    estrategias = {
        'FO (Fortaleza-Oportunidad)': ['Liderazgo IA + Testing', 'Cloud IBM + DevOps', 'I+D + Automatizaci√≥n'],
        'FA (Fortaleza-Amenaza)': ['Portfolio vs Competencia', 'Recursos vs Talent Gap', 'Partnerships defensivos'],
        'DO (Debilidad-Oportunidad)': ['Estandarizaci√≥n procesos', 'CMMI Level 4 objetivo', 'M√©tricas consistentes'],
        'DA (Debilidad-Amenaza)': ['Acelerar transformaci√≥n', 'Reducir time-to-market', 'Modernizar legacy']
    }
    
    y_estrategias = 0.9
    for estrategia, acciones in estrategias.items():
        color = {'FO': IBM_COLORS['green'], 'FA': IBM_COLORS['blue'], 
                'DO': IBM_COLORS['orange'], 'DA': IBM_COLORS['red']}[estrategia[:2]]
        
        ax6.text(0.05, y_estrategias, estrategia, fontweight='bold', fontsize=11, 
                color=color, transform=ax6.transAxes)
        y_estrategias -= 0.08
        
        for accion in acciones:
            ax6.text(0.1, y_estrategias, f'‚Ä¢ {accion}', fontsize=9, 
                    transform=ax6.transAxes, color=IBM_COLORS['dark_gray'])
            y_estrategias -= 0.05
        y_estrategias -= 0.03
    
    ax6.set_xlim(0, 1)
    ax6.set_ylim(0, 1)
    ax6.axis('off')
    ax6.set_title('üéØ ESTRATEGIAS DERIVADAS', fontweight='bold', color=IBM_COLORS['purple'], fontsize=14)
    
    # üìä Panel de resumen ejecutivo (parte inferior)
    ax7 = fig.add_subplot(gs[2, :])
    ax7.set_xlim(0, 10)
    ax7.set_ylim(0, 1)
    ax7.axis('off')
    
    # T√≠tulo del resumen
    ax7.text(5, 0.9, 'üìã RESUMEN EJECUTIVO - AN√ÅLISIS DOFA CUANTIFICADO', 
            ha='center', va='center', fontsize=14, fontweight='bold', color=IBM_COLORS['blue'])
    
    # M√©tricas clave
    resumen_metricas = [
        f"üí™ Fortalezas: {np.mean(score_fortalezas):.1f}/10 | Liderazgo tecnol√≥gico y recursos s√≥lidos",
        f"üöÄ Oportunidades: {np.mean(score_oportunidades):.1f}/10 | Mercado DevOps y IA en crecimiento exponencial", 
        f"‚ö†Ô∏è Debilidades: {np.mean(score_debilidades):.1f}/10 | Procesos no estandarizados requieren atenci√≥n urgente",
        f"‚ö° Amenazas: {np.mean(score_amenazas):.1f}/10 | Competencia cloud y disrupciones tecnol√≥gicas"
    ]
    
    y_resumen = 0.7
    for metrica in resumen_metricas:
        ax7.text(5, y_resumen, metrica, ha='center', va='center', fontsize=11, 
                color=IBM_COLORS['dark_gray'], transform=ax7.transAxes)
        y_resumen -= 0.15
    
    # Recomendaci√≥n final
    ax7.text(5, 0.1, 'üèÜ RECOMENDACI√ìN: Estrategia FO prioritaria - Aprovechar fortalezas tecnol√≥gicas para capturar oportunidades IA/DevOps', 
            ha='center', va='center', fontsize=12, fontweight='bold', 
            color=IBM_COLORS['green'], transform=ax7.transAxes,
            bbox=dict(boxstyle='round,pad=0.5', facecolor=IBM_COLORS['light_gray'], alpha=0.8))
    
    plt.tight_layout(rect=[0, 0.02, 1, 0.93])
    
    # üíæ Guardar con m√°xima calidad
    output_path = Path('diagrams/dofa-detallado-cuantificado-python.png')
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white', edgecolor='none')
    print(f"‚úÖ Figura 3.2 guardado en: {output_path}")
    plt.close()

def main():
    """
    üöÄ Funci√≥n principal - Ejecutar generaci√≥n de todos los diagramas faltantes
    """
    print("üöÄ Generando Diagramas Faltantes Python de M√°xima Calidad...")
    print("üìä Figuras 2.1, 2.2, 2.3 y 3.2 - Universidad Polit√©cnico Grancolombiano")
    print("=" * 80)
    
    # Configurar matplotlib para m√°xima calidad
    configurar_matplotlib()
    
    # Crear directorio de salida si no existe
    output_dir = Path('diagrams')
    output_dir.mkdir(exist_ok=True)
    
    try:
        # Generar cada figura
        generar_figura_2_1_seleccion_estrategica()
        generar_figura_2_2_evaluacion_cuantitativa() 
        generar_figura_2_3_pros_contras()
        generar_figura_3_2_dofa_detallado()
        
        print("=" * 80)
        print("üèÜ Todos los diagramas faltantes generados exitosamente:")
        print("‚ú® Calidad: 300 DPI")
        print("üé® Colores: IBM Corporate")
        print("üìê Formato: PNG optimizado")
        print("üìä Datos: Acad√©micos extra√≠dos del documento")
        print("üîß Librer√≠as: matplotlib, seaborn, pandas, numpy")
        
    except Exception as e:
        print(f"‚ùå Error generando diagramas: {str(e)}")
        raise

if __name__ == "__main__":
    main()