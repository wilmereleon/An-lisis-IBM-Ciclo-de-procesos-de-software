#!/bin/bash

# Script de inicializaci√≥n para IBM Quality Management System
# Backend setup y configuraci√≥n

echo "üöÄ Iniciando IBM Quality Management System Backend"
echo "=================================================="

# Verificar Node.js
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js no est√° instalado. Por favor instala Node.js 18+ primero."
    exit 1
fi

NODE_VERSION=$(node -v | sed 's/v//')
echo "‚úÖ Node.js versi√≥n: $NODE_VERSION"

# Verificar npm
if ! command -v npm &> /dev/null; then
    echo "‚ùå npm no est√° disponible."
    exit 1
fi

NPM_VERSION=$(npm -v)
echo "‚úÖ npm versi√≥n: $NPM_VERSION"

# Instalar dependencias del backend
echo ""
echo "üì¶ Instalando dependencias del backend..."
cd backend-optimized

if [ ! -f "package.json" ]; then
    echo "‚ùå package.json no encontrado en backend-optimized/"
    exit 1
fi

npm install

if [ $? -eq 0 ]; then
    echo "‚úÖ Dependencias del backend instaladas correctamente"
else
    echo "‚ùå Error instalando dependencias del backend"
    exit 1
fi

# Crear directorios necesarios
echo ""
echo "üìÅ Creando directorios del sistema..."
mkdir -p logs
mkdir -p uploads
mkdir -p temp

echo "‚úÖ Directorios creados"

# Crear archivo de configuraci√≥n si no existe
if [ ! -f ".env" ]; then
    echo ""
    echo "üîß Creando archivo de configuraci√≥n..."
    cat > .env << EOL
# IBM Quality Management System - Backend Configuration
NODE_ENV=development
PORT=3001
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
JWT_EXPIRES_IN=24h
LOG_LEVEL=info

# Database Configuration (cuando se implemente)
# DB_HOST=localhost
# DB_PORT=5432
# DB_NAME=ibm_quality_mgmt
# DB_USER=postgres
# DB_PASSWORD=password

# CORS Configuration
CORS_ORIGIN=http://localhost:3000

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Auth Rate Limiting
AUTH_RATE_LIMIT_WINDOW_MS=900000
AUTH_RATE_LIMIT_MAX_REQUESTS=5
EOL
    echo "‚úÖ Archivo .env creado con configuraci√≥n por defecto"
    echo "‚ö†Ô∏è  IMPORTANTE: Cambia JWT_SECRET en producci√≥n"
else
    echo "‚úÖ Archivo .env ya existe"
fi

# Verificar estructura de archivos
echo ""
echo "üîç Verificando estructura del proyecto..."

required_files=(
    "src/controllers/authController.js"
    "src/controllers/userController.js"
    "src/middleware/authMiddleware.js"
    "src/middleware/roleMiddleware.js"
    "src/routes/auth.js"
    "src/services/userService.js"
    "src/utils/logger.js"
    "server.js"
)

missing_files=()

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -eq 0 ]; then
    echo "‚úÖ Todos los archivos requeridos est√°n presentes"
else
    echo "‚ùå Archivos faltantes:"
    for file in "${missing_files[@]}"; do
        echo "   - $file"
    done
    echo "Por favor aseg√∫rate de que todos los archivos est√©n presentes"
    exit 1
fi

# Probar inicio del servidor
echo ""
echo "üß™ Probando configuraci√≥n del servidor..."

# Crear script de prueba temporal
cat > test_server.js << EOL
const app = require('./server.js');
console.log('‚úÖ Servidor configurado correctamente');
process.exit(0);
EOL

if node test_server.js 2>/dev/null; then
    echo "‚úÖ Configuraci√≥n del servidor v√°lida"
    rm test_server.js
else
    echo "‚ùå Error en la configuraci√≥n del servidor"
    rm -f test_server.js
    exit 1
fi

echo ""
echo "üéâ Backend inicializado correctamente!"
echo ""
echo "Para iniciar el servidor:"
echo "  npm start"
echo ""
echo "Para desarrollo con auto-reload:"
echo "  npm run dev"
echo ""
echo "El servidor estar√° disponible en: http://localhost:3001"
echo ""
echo "Usuarios de prueba disponibles:"
echo "- admin@ibm.com / Admin123!"
echo "- manager@ibm.com / Manager123!"
echo "- analyst@ibm.com / Analyst123!"
echo "- tester@ibm.com / Tester123!"
echo "- viewer@ibm.com / Viewer123!"