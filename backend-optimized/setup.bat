@echo off
setlocal enabledelayedexpansion

echo üöÄ Iniciando IBM Quality Management System Backend
echo ==================================================

REM Verificar Node.js
where node >nul 2>nul
if %errorlevel% neq 0 (
    echo ‚ùå Node.js no est√° instalado. Por favor instala Node.js 18+ primero.
    pause
    exit /b 1
)

for /f "tokens=*" %%i in ('node -v') do set NODE_VERSION=%%i
echo ‚úÖ Node.js versi√≥n: %NODE_VERSION%

REM Verificar npm
where npm >nul 2>nul
if %errorlevel% neq 0 (
    echo ‚ùå npm no est√° disponible.
    pause
    exit /b 1
)

for /f "tokens=*" %%i in ('npm -v') do set NPM_VERSION=%%i
echo ‚úÖ npm versi√≥n: %NPM_VERSION%

REM Instalar dependencias del backend
echo.
echo üì¶ Instalando dependencias del backend...
cd backend-optimized

if not exist "package.json" (
    echo ‚ùå package.json no encontrado en backend-optimized/
    pause
    exit /b 1
)

call npm install

if %errorlevel% equ 0 (
    echo ‚úÖ Dependencias del backend instaladas correctamente
) else (
    echo ‚ùå Error instalando dependencias del backend
    pause
    exit /b 1
)

REM Crear directorios necesarios
echo.
echo üìÅ Creando directorios del sistema...
if not exist "logs" mkdir logs
if not exist "uploads" mkdir uploads
if not exist "temp" mkdir temp

echo ‚úÖ Directorios creados

REM Crear archivo de configuraci√≥n si no existe
if not exist ".env" (
    echo.
    echo üîß Creando archivo de configuraci√≥n...
    (
        echo # IBM Quality Management System - Backend Configuration
        echo NODE_ENV=development
        echo PORT=3001
        echo JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
        echo JWT_EXPIRES_IN=24h
        echo LOG_LEVEL=info
        echo.
        echo # Database Configuration ^(cuando se implemente^)
        echo # DB_HOST=localhost
        echo # DB_PORT=5432
        echo # DB_NAME=ibm_quality_mgmt
        echo # DB_USER=postgres
        echo # DB_PASSWORD=password
        echo.
        echo # CORS Configuration
        echo CORS_ORIGIN=http://localhost:3000
        echo.
        echo # Rate Limiting
        echo RATE_LIMIT_WINDOW_MS=900000
        echo RATE_LIMIT_MAX_REQUESTS=100
        echo.
        echo # Auth Rate Limiting
        echo AUTH_RATE_LIMIT_WINDOW_MS=900000
        echo AUTH_RATE_LIMIT_MAX_REQUESTS=5
    ) > .env
    echo ‚úÖ Archivo .env creado con configuraci√≥n por defecto
    echo ‚ö†Ô∏è  IMPORTANTE: Cambia JWT_SECRET en producci√≥n
) else (
    echo ‚úÖ Archivo .env ya existe
)

REM Verificar estructura de archivos
echo.
echo üîç Verificando estructura del proyecto...

set "missing_files="

if not exist "src\controllers\authController.js" set "missing_files=!missing_files! authController.js"
if not exist "src\controllers\userController.js" set "missing_files=!missing_files! userController.js"
if not exist "src\middleware\authMiddleware.js" set "missing_files=!missing_files! authMiddleware.js"
if not exist "src\middleware\roleMiddleware.js" set "missing_files=!missing_files! roleMiddleware.js"
if not exist "src\routes\auth.js" set "missing_files=!missing_files! auth.js"
if not exist "src\services\userService.js" set "missing_files=!missing_files! userService.js"
if not exist "src\utils\logger.js" set "missing_files=!missing_files! logger.js"
if not exist "server.js" set "missing_files=!missing_files! server.js"

if "!missing_files!"=="" (
    echo ‚úÖ Todos los archivos requeridos est√°n presentes
) else (
    echo ‚ùå Archivos faltantes: !missing_files!
    echo Por favor aseg√∫rate de que todos los archivos est√©n presentes
    pause
    exit /b 1
)

echo.
echo üéâ Backend inicializado correctamente!
echo.
echo Para iniciar el servidor:
echo   npm start
echo.
echo Para desarrollo con auto-reload:
echo   npm run dev
echo.
echo El servidor estar√° disponible en: http://localhost:3001
echo.
echo Usuarios de prueba disponibles:
echo - admin@ibm.com / Admin123!
echo - manager@ibm.com / Manager123!
echo - analyst@ibm.com / Analyst123!
echo - tester@ibm.com / Tester123!
echo - viewer@ibm.com / Viewer123!
echo.
pause