<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="Gloss%206_3_files/filelist.xml">
<link rel=Edit-Time-Data href="Gloss%206_3_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Glossary of terms used in software testing </title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="country-region"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="PlaceType"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="PlaceName"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="place"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Reid</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>Reid</o:LastAuthor>
  <o:Revision>3</o:Revision>
  <o:TotalTime>13</o:TotalTime>
  <o:Created>2004-09-06T11:08:00Z</o:Created>
  <o:LastSaved>2004-09-06T11:20:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>6750</o:Words>
  <o:Characters>38476</o:Characters>
  <o:Company>Cranfield University</o:Company>
  <o:Lines>320</o:Lines>
  <o:Paragraphs>90</o:Paragraphs>
  <o:CharactersWithSpaces>45136</o:CharactersWithSpaces>
  <o:Version>10.6626</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-margin-top-alt:auto;
	margin-right:0cm;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:24.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
h4
	{mso-margin-top-alt:auto;
	margin-right:0cm;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:4;
	font-size:12.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
p
	{mso-margin-top-alt:auto;
	margin-right:0cm;
	mso-margin-bottom-alt:auto;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
tt
	{font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:595.3pt 841.9pt;
	margin:72.0pt 90.0pt 72.0pt 90.0pt;
	mso-header-margin:35.4pt;
	mso-footer-margin:35.4pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:217938457;
	mso-list-template-ids:-1257974936;}
@list l1
	{mso-list-id:1827822672;
	mso-list-template-ids:1167066674;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]-->
<meta name=AUTHOR content=Stuart>
<meta name=Author content=Stuart>
</head>

<body lang=EN-GB link=blue vlink=blue style='tab-interval:36.0pt'>

<div class=Section1>

<h1><span style='font-size:13.5pt'>Working Draft:</span></h1>

<h1>Glossary of terms used in software testing</h1>

<p class=MsoNormal><b>Version 6.3</b> </p>

<p><span class=GramE><b>produced</b></span><b> by the British Computer Society</b>
</p>

<p><b>Specialist Interest Group in Software Testing (BCS SIGIST)</b> </p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h4>Copyright Notice</h4>

<p class=MsoNormal>This document may be copied in its entirety, or extracts
made, if the source is acknowledged.&nbsp; </p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h4>Contents</h4>

<p class=MsoNormal><a href="#Foreword">Foreword</a> </p>

<ol start=1 type=1>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><a href="#Introduction">Introduction</a></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><a href="#Scope">Scope</a></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><a href="#Arrangement">Arrangement</a></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><a href="#Normative">Normative
     references</a></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list 36.0pt'><a href="#Definitions">Definitions</a></li>
</ol>

<p class=MsoNormal><b>Annexes</b> </p>

<p><span class=GramE>A</span> <a href="#AnnexA">Index of sources</a> </p>

<p>B <a href="#AnnexB">Document details</a> </p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<p><a name=Foreword></a><b>Foreword</b> </p>

<p>In compiling this glossary the committee has sought the views and comments
of as broad a spectrum of opinion as possible in industry, commerce and
government bodies and organisations, with the aim of producing a standard which
would gain acceptance in as wide a field as possible<span class=GramE>. </span><span
class=SpellE>Totalagreement</span> will rarely, if ever, be achieved in
compiling a document of this nature. </p>

<p><b>1.&nbsp;<a name=Introduction></a>Introduction</b> </p>

<p>Much time and effort is wasted both within and between industry, commerce,
government and professional and academic institutions when ambiguities arise as
a result of the inability to differentiate adequately between such terms as
`path coverage' and `branch coverage'; `test case suite', `test specification'
and `test plan' and similar terms which form an interface between various
sectors and society<span class=GramE>. </span>Moreover, the <span class=GramE>professional,</span>
or technical use of these terms is often at variance with the meanings
attributed to them by lay people. </p>

<p><b>2.&nbsp;<a name=Scope></a>Scope</b> </p>

<p>This document presents concepts, terms and definitions designed to aid
communication in software testing and related disciplines. </p>

<p><b>3.&nbsp;<a name=Arrangement></a>Arrangement</b> </p>

<p>The glossary has been arranged in a single section of definitions arranged
alphabetically<span class=GramE>. </span>The use of a term defined within this
glossary is printed in italics. </p>

<p>Some terms are preferred to other synonymous ones, in which case, the
definition of the preferred term appears, with the synonymous ones referring to
that<span class=GramE>. </span>For example <i>dirty testing</i> refers to <i>negative
testing</i>. </p>

<p><b>4.&nbsp;<a name=Normative></a>Normative references</b> </p>

<p>At the time of publication, the edition indicated was valid<span
class=GramE>. </span>All standards are subject to revision, and parties to
agreements based upon this Standard are encouraged to investigate the
possibility of applying the most recent edition of the standards listed below<span
class=GramE>. </span>Members of IEC and ISO maintain registers of currently
valid International Standards. </p>

<p>ISO 8402:1986<span class=GramE>. Quality Vocabulary.</span> </p>

<p>ISO/IEC 2382-1:1993<span class=GramE>. </span><i>Data processing -
Vocabulary - Part <span class=SpellE>01<span class=GramE>:Fundamental</span></span>
terms</i>. </p>

<p>BS 6154:1981<span class=GramE>. </span><i>Method of defining Syntactic <span
class=SpellE>Metalanguage</span></i>. </p>

<p><b>5.&nbsp;<a name=Definitions></a>Definitions</b> </p>

<p><span class=SpellE><b>5.1<a name=acceptancetesting></a>acceptance</b></span><b>
testing: </b>Formal <a href="#Testing">testing</a> conducted to enable a user,
customer, or other authorized entity to determine whether to accept a system or
<a href="#Component">component</a><span class=GramE>. </span>[IEEE] </p>

<p><span class=SpellE><b>5.2<a name=Actualoutcome></a>actual</b></span><b>
outcome: </b>The <a href="#behaviour">behaviour</a> actually produced when the
object is tested under specified conditions. </p>

<p><b>5.3</b> <b>ad hoc testing:</b> <a href="#Testing">Testing</a> carried out
using no recognised <a href="#Testcasedes">test case design technique</a><b>.</b>
</p>

<p><b>5.4 alpha testing: </b>Simulated or actual operational <a href="#Testing">testing</a>
at an in-house site not otherwise involved with the software developers. </p>

<p><b>5.5 arc testing: </b>See <a href="#Branchtest">branch testing</a>. </p>

<p><b>5.6 Backus-Naur form: </b>A <span class=SpellE>metalanguage</span> used
to formally describe the syntax of a language<span class=GramE>. </span>See BS
6154. </p>

<p><b>5.7 basic block: </b>A sequence of one or more consecutive, <a
href="#Executable">executable statements </a>containing no <a href="#Branch">branch</a>es.
</p>

<p><b>5.8 basis test set:</b> A set of <a href="#Testcase">test cases </a>derived
from the code logic which ensure that 100\% branch <a href="#Branchcov">coverage</a>
is achieved. </p>

<p><b>5.9 <span class=SpellE>bebugging</span>:</b> See <a href="#errorseeding">error
seeding</a><span class=GramE>. </span>[Abbott] </p>

<p><b>5.10&nbsp;<a name=behaviour></a>behaviour: </b>The combination of <a
href="#Inputvalue">input values </a>and <a href="#Precondition">precondition</a>s
and the required response for a function of a system<span class=GramE>. </span>The
full <a href="#Specification">specification</a> of a function would normally
comprise one or more <a href="#behaviour">behaviour</a>s. </p>

<p><b>5.11 beta testing:</b> <a href="#Operationaltesting">Operational testing </a>at
a site not otherwise involved with the software developers. </p>

<p><b>5.12 big-bang testing:</b> <a href="#Integrationtesting">Integration
testing </a>where no <a href="#incrementaltesting">incremental testing </a>takes
place prior to all the system's <a href="#Component">component</a>s being
combined to form the system. </p>

<p><b>5.13 black box testing:</b> See <a href="#functionaltest">functional test
case design.</a> </p>

<p><b>5.14 bottom-up testing:</b> An approach to <a href="#Integrationtesting">integration
testing</a> where the lowest level <a href="#Component">component</a>s are
tested first, then used to facilitate the <a href="#Testing">testing</a> of
higher level <a href="#Component">component</a>s<span class=GramE>. </span>The
process is repeated until the <a href="#Component">component</a> at the top of
the hierarchy is tested. </p>

<p><b>5.15&nbsp;<a name=Boundaryvalue></a>boundary value:</b> An <a
href="#Inputvalue">input value </a>or <a href="#Outputvalue">output value </a>which
is on the boundary between <a href="#Equivalenceclass">equivalence classes</a>,
or an incremental distance either side of the boundary. </p>

<p><b>5.16&nbsp;<a name=Boundaryvalueanal></a>boundary value analysis: </b>A <a
href="#Testcasedes">test case design technique </a>for a <a href="#Component">component</a>
in which <a href="#Testcase">test cases </a>are designed which include representatives
of <a href="#Boundaryvalue">boundary values</a>. </p>

<p><b>5.17 boundary value coverage:</b> The percentage of <a
href="#Boundaryvalue">boundary values </a>of the component's <a
href="#Equivalenceclass">equivalence classes </a>which have been <a
href="#Exercised">exercised</a> by a <a href="#Testcasesuite">test case suite</a>.
</p>

<p><b>5.18 boundary value testing:</b> See <a href="#Boundaryvalueanal">boundary
value analysis</a>. </p>

<p><b>5.19&nbsp;<a name=Branch></a>branch: </b>A conditional transfer of control
from any <a href="#Statement">statement</a> to any other <a href="#Statement">statement</a>
in a <a href="#Component">component</a>, or an unconditional transfer of
control from any <a href="#Statement">statement</a> to any other <a
href="#Statement">statement</a> in the <a href="#Component">component</a>
except the next <a href="#Statement">statement</a>, or when a <a
href="#Component">component</a> has more than one <a href="#Entrypoint">entry
point</a>, a transfer of control to an entry point of the <a href="#Component">component</a>.
</p>

<p><b>5.20 branch condition:</b> See <a href="#Decisioncondition">decision
condition</a>. </p>

<p><b>5.21 branch condition combination coverage:</b> The percentage of combinations
of all branch condition outcomes in every <a href="#Decision">decision</a> that
have been <a href="#Exercised">exercised</a> by a <a href="#Testcasesuite">test
case suite</a>. </p>

<p><b>5.22&nbsp;<a name=Branchconcomcov></a>branch condition combination
testing: </b>A <a href="#Testcasedes">test case design technique </a>in which <a
href="#Testcase">test cases </a>are designed to execute combinations of branch
condition outcomes. </p>

<p><b>5.23&nbsp;<a name=Branchconditioncov></a>branch condition coverage: </b>The
percentage of branch condition outcomes in every <a href="#Decision">decision</a>
that have been exercised by a <a href="#Testcasesuite">test case suite.</a> </p>

<p><b>5.24 branch condition testing:</b> A <a href="#Testcasedes">test case
design technique </a>in which <a href="#Testcase">test cases </a>are designed
to execute branch condition outcomes. </p>

<p><b>5.25&nbsp;<a name=Branchcov></a>branch coverage:</b> The percentage of <a
href="#Branch">branches</a> that have been <a href="#Exercised">exercised</a>
by a <a href="#Testcasesuite">test case suite</a> </p>

<p><b>5.26&nbsp;<a name=Branchoutcome></a>branch outcome: </b>See <a
href="#Decisionoutcome">decision outcome</a><b>.</b> </p>

<p><b>5.27 branch point:</b> See <a href="#Decision">decision.</a> </p>

<p><a name=Branchtest></a><b>5.28 branch testing: A</b> <a href="#Testcasedes">test
case design technique </a>for a <a href="#Component">component </a>in which <a
href="#Testcase">test cases </a>are designed to execute <a href="#Branchoutcome">branch
outcomes.</a> </p>

<p><b>5.29 bug:</b> See <a href="#Fault">fault</a>. </p>

<p><b>5.30 bug seeding: </b>See <a href="#errorseeding">error seeding</a>. </p>

<p><b>5.31&nbsp;<a name=Cuse></a>C-use: </b>See <a href="#Computation">computation
data use.</a> </p>

<p><b>5.32&nbsp;<a name=captureplay></a>capture/playback tool: </b>A test tool
that records test input as it is sent to the software under test<span
class=GramE>. </span>The input cases stored can then be used to reproduce the
test at a later time. </p>

<p><b>5.33 capture/replay tool:</b> See <a href="#captureplay">capture/playback
tool.</a> </p>

<p><b>5.34 CAST:</b> Acronym for computer-aided software testing. </p>

<p><b>5.35&nbsp;<a name=Causeeffect></a>cause-effect graph: </b>A graphical
representation of <a href="#Input">inputs </a>or stimuli (causes) with their
associated <a href="#Output">outputs </a>(effects), which can be used to design
<a href="#Testcase">test cases.</a> </p>

<p><b>5.36 cause-effect graphing:</b> A <a href="#Testcasedes">test case design
technique </a>in which <a href="#Testcase">test cases </a>are designed by
consideration of <a href="#Causeeffect">cause-effect graphs.</a> </p>

<p><b>5.37 certification: </b>The process of confirming that a system or <a
href="#Component">component </a>complies with its specified requirements and is
acceptable for operational use<span class=GramE>. From [IEEE].</span> </p>

<p><b>5.38 Chow's coverage metrics:</b> See <a href="#Nswitch">N-switch
coverage</a><span class=GramE>. </span>[Chow] </p>

<p><b>5.39 code coverage:</b> An analysis method that determines which parts of
the software have been executed (covered) by the <a href="#Testcasesuite">test
case suite </a>and which parts have not been executed and therefore may require
additional attention. </p>

<p><b>5.40 code-based testing:</b> Designing tests based on objectives derived
from the implementation (e.g., tests that execute specific <a
href="#Controlflowpath">control flow paths </a>or use specific data items). </p>

<p><b>5.41 compatibility testing:</b> <a href="#Testing">Testing </a>whether
the system is compatible with other systems with which it should communicate. </p>

<p><b>5.42 complete path testing:</b> See <a href="#Exhaustivetest">exhaustive
testing</a>. </p>

<p><a name=Component></a><b>5.43 <span class=GramE>component</span>: </b>A
minimal software item for which a separate <a href="#Specification">specification</a>
is available. </p>

<p><b>5.44&nbsp;<a name=Componenttest></a>component testing: </b>The <a
href="#Testing">testing</a> of individual software <a href="#Component">components</a><span
class=GramE>. After [IEEE].</span> </p>

<p><a name=Computation></a><b>5.45&nbsp;<a name=Computationdata></a>computation
data use: </b>A <a href="#Datause">data use </a>not in a <a href="#Condition">condition</a><span
class=GramE>. Also called <a href="#Cuse">C-use</a><b>.</b></span> </p>

<p><b>5.46&nbsp;<a name=Condition></a>condition: </b>A Boolean expression
containing no Boolean operators<span class=GramE>. </span>For instance<b>, </b><tt><span
style='font-size:10.0pt'>A&lt;B</span></tt> is a <a href="#Condition">condition</a>
but <tt><span style='font-size:10.0pt'>A and B</span></tt> is not<span
class=GramE>. </span>[DO-178B] </p>

<p><b>5.47 condition coverage:</b> See <a href="#Branchconditioncov">branch
condition coverage</a>. </p>

<p><b>5.48&nbsp;<a name=Conditionoutcome></a>condition outcome:</b> The
evaluation of a <a href="#Condition">condition </a>to TRUE or FALSE. </p>

<p><b>5.49 conformance criterion:</b> Some method of judging whether or not the
<a href="#Component">component</a>'s action on a particular <a
href="#Specifiedinput">specified input </a>value conforms to the <a
href="#Specification">specification</a>. </p>

<p><b>5.50 conformance testing:</b> The process of <a href="#Testing">testing</a>
that an implementation conforms to the <a href="#Specification">specification</a>
on which it is based. </p>

<p><b>5.51&nbsp;<a name=Controlflow></a>control flow: </b>An abstract
representation of all possible sequences of events in a program's execution<b>.</b>
</p>

<p><b>5.52 control flow graph:</b> The diagrammatic representation of the
possible alternative <a href="#Controlflowpath">control flow paths </a>through
a <a href="#Component">component</a>. </p>

<p><b>5.53&nbsp;<a name=Controlflowgraph></a><a name=Controlflowpath></a>control
flow path: </b>See <a href="#Path">path.</a> </p>

<p><b>5.54 conversion testing:</b> <a href="#Testing">Testing</a> of programs
or procedures used to convert data from existing systems for use in replacement
systems. </p>

<p><span class=GramE><b>5.55&nbsp;<a name=Correctness></a>correctness: </b>The
degree to which software conforms to its <a href="#Specification">specification</a>.</span>
</p>

<p><span class=GramE><b>5.56&nbsp;<a name=Coverage></a>coverage:</b></span><b> </b>The
degree, expressed as a percentage, to which a specified <a href="#Coverageitem">coverage
item </a>has been <a href="#Exercised">exercised</a> by a <a
href="#Testcasesuite">test case suite.</a> </p>

<p><b>5.57&nbsp;<a name=Coverageitem></a>coverage item: </b>An entity or
property used as a basis for <a href="#Testing">testing.</a> </p>

<p><b>5.58&nbsp;<a name=datadef></a>data definition: </b>An <a
href="#Executable">executable statement </a>where a variable is assigned a
value<b>.</b> </p>

<p><b>5.59<a name=DatadefCucov></a> data definition C-use coverage: </b>The
percentage of <a href="#DatadefCpair">data definition C-use pairs </a>in <span
class=GramE>a <a href="#Component">component</a> that are</span> <a
href="#Exercised">exercised </a>by a <a href="#Testcasesuite">test case suite</a>.
</p>

<p><b>5.60&nbsp;<a name=DatadefCpair></a>data definition C-use pair: </b>A <a
href="#datadef">data definition </a>and <a href="#Computationdata">computation
data use</a>, where the <a href="#Datause">data use </a>uses the value defined
in the <a href="#datadef">data definition</a>. </p>

<p><b>5.61&nbsp;<a name=DatadefuPcov></a>data definition P-use coverage: </b>The
percentage of <a href="#DatadefP">data definition P-use pairs </a>in <span
class=GramE>a <a href="#Component">component</a> that are</span> <a
href="#Exercised">exercised </a>by a <a href="#Testcasesuite">test case suite</a>.
</p>

<p><b>5.62&nbsp;<a name=DatadefP></a>data definition P-use pair: </b>A <a
href="#datadef">data definition </a>and <a href="#Predicatedata">predicate data
use</a>, where the <a href="#Datause">data use </a>uses the value defined in
the <a href="#datadef">data definition</a>. </p>

<p><b>5.63&nbsp;<a name=Datadefucov></a>data definition-use coverage: </b>The
percentage of <a href="#Datadefupair">data definition-use pairs </a>in <span
class=GramE>a <a href="#Component">component</a> that are</span> <a
href="#Exercised">exercised </a>by a <a href="#Testcasesuite">test case suite.</a>
</p>

<p><b>5.64&nbsp;<a name=Datadefupair></a>data definition-use pair: </b>A <a
href="#datadef">data definition </a>and <a href="#Datause">data use</a>, where
the <a href="#Datause">data use </a>uses the value defined in the <a
href="#datadef">data definition.</a> </p>

<p><b>5.65 data definition-use testing:</b> A <a href="#Testcasedes">test case
design technique </a>for a <a href="#Component">component</a> in which <a
href="#Testcase">test cases </a>are designed to execute <a href="#Datadefupair">data
definition-use pairs</a>. </p>

<p><b>5.66 data flow coverage:</b> <a href="#Testcoverage">Test coverage </a>measure
based on variable usage within the code<span class=GramE>. </span>Examples are <a
href="#Datadefucov">data definition-use coverage</a>, <a href="#DatadefuPcov">data
definition P-use coverage</a>, <a href="#DatadefCucov">data definition C-use
coverage</a>, etc. </p>

<p><b>5.67 data flow testing:</b> <a href="#Testing">Testing</a> in which <a
href="#Testcase">test cases </a>are designed based on variable usage within the
code. </p>

<p><b>5.68&nbsp;<a name=Datause></a>data use: </b>An <a href="#Executable">executable
statement </a>where the value of a variable is accessed<b>.</b> </p>

<p><b>5.69 debugging:</b> The process of finding and removing the causes of <a
href="#Failure">failure</a>s in software. </p>

<p><b>5.70&nbsp;<a name=Decision></a><span class=GramE>decision</span>: </b>A
program point at which the <a href="#Controlflow">control flow </a>has two or
more alternative routes. </p>

<p><b>5.71&nbsp;<a name=Decisioncondition></a>Decision condition:</b> A <a
href="#Condition">condition</a> within a <a href="#Decision">decision</a>. </p>

<p><b>5.72 decision coverage:</b> The percentage of <a href="#Decisionoutcome">decision
outcomes </a>that have been <a href="#Exercised">exercised</a> by a <a
href="#Testcasesuite">test case suite</a>. </p>

<p><b>5.73&nbsp;<a name=Decisionoutcome></a>decision outcome:</b> The result of
a <a href="#Decision">decision</a> (which therefore determines the <a
href="#Controlflow">control flow </a>alternative taken). </p>

<p><b>5.74 design-based testing:</b> Designing tests based on objectives
derived from the architectural or detail design of the software (e.g., tests
that execute specific invocation paths or probe the worst case behaviour of
algorithms). </p>

<p><b>5.75 desk checking:</b> The <a href="#Testing">testing</a> of software by
the manual <a href="#Simulation">simulation</a> of its execution. </p>

<p><b>5.76 dirty testing:</b> See <a href="#Negative">negative testing</a><span
class=GramE>. </span>[<span class=SpellE>Beizer</span>] </p>

<p><b>5.77 documentation testing:</b> <a href="#Testing">Testing</a> concerned
with the accuracy of documentation. </p>

<p><b>5.78 domain:</b> The set from which values are selected. </p>

<p><b>5.79 domain testing:</b> See <a href="#Equivalencepartiontest">equivalence
partition testing</a>. </p>

<p><b>5.80 dynamic analysis:</b> The process of evaluating a system or <a
href="#Component">component</a> based upon its <a href="#behaviour">behaviour</a>
during execution<span class=GramE>. </span>[IEEE] </p>

<p><b>5.81 emulator:</b> A device, computer program, or system that accepts the
same <a href="#Input">inputs</a> and produces the same <a href="#Output">outputs</a>
as a given system<span class=GramE>. </span>[<span class=SpellE>IEEE<span
class=GramE>,do178b</span></span>] </p>

<p><b>5.82&nbsp;<a name=Entrypoint></a>entry point:</b> The first <a
href="#Executable">executable statement </a>within a <a href="#Component">component</a>.
</p>

<p><b>5.83&nbsp;<a name=Equivalenceclass></a>equivalence class: </b>A portion
of the <a href="#Component">component</a>'s <a href="#Input">input</a> or <a
href="#Outputdomain">output domains </a>for which the <a href="#Component">component</a>'s
behaviour is assumed to be the same from the <a href="#Component">component'</a>s
specification. </p>

<p><b>5.84 equivalence partition:</b> See <a href="#Equivalenceclass">equivalence
class</a>. </p>

<p><b>5.85 equivalence partition coverage:</b> The percentage of <a
href="#Equivalenceclass">equivalence classes </a>generated for the <a
href="#Component">component</a>, which have been <a href="#Exercised">exercised</a>
by a <a href="#Testcasesuite">test case suite</a>. </p>

<p><b>5.86&nbsp;<a name=Equivalencepartiontest></a>equivalence partition
testing: </b>A <a href="#Testcasedes">test case design technique </a>for a <a
href="#Component">component</a> in which <a href="#Testcase">test cases </a>are
designed to execute representatives from <a href="#Equivalenceclass">equivalence
classes</a>. </p>

<p><b>5.87&nbsp;<a name=Error></a>error: </b>A human action that produces an
incorrect result<span class=GramE>. </span>[IEEE] </p>

<p><b>5.88 error guessing:</b> A <a href="#Testcasedes">test case design
technique </a>where the experience of the tester is used to postulate what <a
href="#Fault">faults </a>might occur, and to design tests specifically to
expose them. </p>

<p><b>5.89&nbsp;<a name=errorseeding></a>error seeding: </b>The process of
intentionally adding known <a href="#Fault">fault</a>s to those already in a
computer program for the purpose of monitoring the rate of detection and
removal, and estimating the number of <a href="#Fault">fault</a>s remaining in
the program<span class=GramE>. </span>[IEEE] </p>

<p><b>5.90&nbsp;<a name=Executable></a>executable statement: </b>A <a
href="#Statement">statement</a> which, when compiled, is translated into object
code, which will be executed procedurally when the program is running and may perform
an action on program data. </p>

<p><b>5.91<a name=Exercised></a> exercised: </b>A program element is <a
href="#Exercised">exercised</a> by a <a href="#Testcase">test case </a>when the
<a href="#Inputvalue">input value </a>causes the execution of that element, such
as a <a href="#Statement">statement</a>, <a href="#Branch">branch</a>, or other
structural element. </p>

<p><b>5.92&nbsp;<a name=Exhaustivetest></a>exhaustive testing: </b>A <a
href="#Testcasedes">test case design technique </a>in which the <a
href="#Testcasesuite">test case suite </a>comprises all combinations of <a
href="#Inputvalue">input values </a>and <a href="#Precondition">precondition</a>s
for <a href="#Component">component</a> variables. </p>

<p><b>5.93&nbsp;<a name=Exitpoint></a>exit point: </b>The last <a
href="#Executable">executable statement </a>within a <a href="#Component">component.</a>
</p>

<p><b>5.94&nbsp;<a name=Expected></a>expected outcome: </b>See <a
href="#Predictedoutcome">predicted outcome</a>. </p>

<p><b>5.95 facility testing:</b> See <a href="#functionaltest">functional test
case design</a>. </p>

<p><b>5.96&nbsp;<a name=Failure></a>failure: </b>Deviation of the software from
its expected delivery or service<span class=GramE>. </span>[Fenton] </p>

<p><a name=Fault></a><b>5.97 fault: </b>A manifestation of an <a href="#Error">error</a>
in software<span class=GramE>. </span>A <a href="#Fault">fault</a>, if
encountered may cause a <a href="#Failure">failure</a><span class=GramE>. </span>[<span
class=SpellE>do178b</span><b>]</b> </p>

<p><b>5.98 feasible path:</b> A path for which there exists a set of <a
href="#Inputvalue">input values </a>and execution conditions which causes it to
be executed. </p>

<p><b>5.99 feature testing:</b> See <a href="#functionaltest">functional test
case design</a>. </p>

<p><b>5.100 functional specification:</b> The document that describes in detail
the characteristics of the product with regard to its intended capability<span
class=GramE>. </span>[BS 4778, <span class=SpellE>Part2</span>] </p>

<p><b>5.101&nbsp;<a name=functionaltest></a>functional test case design: </b><a
href="#Testcase">Test case </a>selection that is based on an analysis of the <a
href="#Specification">specification</a> of the <a href="#Component">component</a>
without reference to its internal workings. </p>

<p><b>5.102 glass box testing:</b> See <a href="#Structuraltestcase">structural
test case design</a>. </p>

<p><b>5.103&nbsp;<a name=incrementaltesting></a>incremental testing: </b><a
href="#Integrationtesting">Integration testing </a>where system <a
href="#Component">component</a>s <span class=GramE>are</span> integrated into
the system one at a time until the entire system is integrated. </p>

<p><b>5.104 independence:</b> Separation of responsibilities which ensures the
accomplishment of objective evaluation<span class=GramE>. After [<span
class=SpellE>do178b</span>].</span> </p>

<p><b>5.105 infeasible <span class=GramE>path</span>:</b> A <a href="#Path">path</a>
which cannot be <a href="#Exercised">exercised</a> by any set of possible <a
href="#Inputvalue">input values</a>. </p>

<p><b>5.106&nbsp;<a name=Input></a>input: </b>A variable (whether stored within
a <a href="#Component">component </a>or outside it) that is read by the <a
href="#Component">component</a>. </p>

<p><b>5.107 input domain:</b> The set of all possible <a href="#Input">input</a>s.
</p>

<p><b>5.108&nbsp;<a name=Inputvalue></a>input value:</b> An instance of an <a
href="#Input">input</a><b>.</b> </p>

<p><b>5.109&nbsp;<a name=Inspection></a>inspection: </b>A group <a
href="#Review">review</a> quality improvement process for written material<span
class=GramE>. </span>It consists of two aspects; product (document itself)
improvement and process improvement (of both document production and <a
href="#Inspection">inspection</a>)<span class=GramE>. </span>After [Graham] </p>

<p><b>5.110 installability testing:</b> <a href="#Testing">Testing</a>
concerned with the installation procedures for the system. </p>

<p><span class=GramE><b>5.111&nbsp;<a name=Instrumentation></a>instrumentation:
</b>The insertion of additional code into the program in order to collect
information about program <a href="#behaviour">behaviour </a>during program
execution.</span> </p>

<p><span class=GramE><b>5.112&nbsp;<a name=Instrumenter></a>instrumenter:</b></span><b>
</b>A software tool used to carry out <a href="#Instrumentation">instrumentation</a>.
</p>

<p><span class=GramE><b>5.113&nbsp;<a name=Integration></a>integration: </b>The
process of combining <a href="#Component">component</a>s into larger assemblies<b>.</b></span>
</p>

<p><b>5.114&nbsp;<a name=Integrationtesting></a>integration testing: </b><a
href="#Testing">Testing</a> performed to expose <a href="#Fault">fault</a>s in
the interfaces and in the interaction between integrated <a href="#Component">component</a>s.
</p>

<p><b>5.115 interface testing:</b> <a href="#Integrationtesting">Integration
testing </a>where the interfaces between system <a href="#Component">component</a>s
are tested. </p>

<p><b>5.116 isolation testing:</b> <a href="#Componenttest">Component testing </a>of
individual <a href="#Component">component</a>s in isolation from surrounding <a
href="#Component">component</a>s, with surrounding <a href="#Component">component</a>s
being simulated by <a href="#Stub">stub</a>s. </p>

<p><b>5.117&nbsp;<a name=LCSAJ></a>LCSAJ: </b>A Linear Code Sequence And Jump,
consisting of the following three items (conventionally identified by line
numbers in a source code listing): the start of the linear sequence of <a
href="#Executable">executable statements</a>, the end of the linear sequence,
and the target line to which <a href="#Controlflow">control flow </a>is
transferred at the end of the linear sequence. </p>

<p><b>5.118 LCSAJ coverage:</b> The percentage of <a href="#LCSAJ"><span
class=SpellE>LCSAJ</span></a><span class=SpellE>s</span> of a <a
href="#Component">component</a> which are <a href="#Exercised">exercised</a> by
a <a href="#Testcasesuite">test case suite.</a> </p>

<p><b>5.119 LCSAJ testing:</b> A <a href="#Testcasedes">test case design
technique </a>for a <a href="#Component">component </a>in which <a
href="#Testcase">test cases </a>are designed to execute <a href="#LCSAJ"><span
class=SpellE>LCSAJ</span></a><span class=SpellE>s</span>. </p>

<p><b>5.120 logic-coverage testing:</b> <a href="#Structuraltestcase">See
structural test case design</a><span class=GramE>. </span>[Myers] </p>

<p><b>5.121 logic-driven testing:</b> See <a href="#Structuraltestcase">structural
test case design</a>. </p>

<p><b>5.122&nbsp;<a name=Maintainability></a>maintainability testing: </b><a
href="#Testing">Testing </a>whether the system meets its specified objectives
for maintainability. </p>

<p><b>5.123 modified condition/decision coverage:</b> The percentage of all
branch condition outcomes that independently affect a <a href="#Decisionoutcome">decision
outcome </a>that have been exercised by a test case suite. </p>

<p><b>5.124 modified condition/decision testing:</b> A <a href="#Testcasedes">test
case design technique </a>in which <a href="#Testcase">test cases </a>are
designed to execute branch condition outcomes that independently affect a <a
href="#Decisionoutcome">decision outcome</a>. </p>

<p><b>5.125 <span class=GramE>multiple</span> condition coverage:</b> See <a
href="#Branchconcomcov">branch condition combination coverage</a>. </p>

<p><b>5.126 mutation analysis:</b> A method to determine <a
href="#Testcasesuite">test case suite </a>thoroughness by measuring the extent
to which a <a href="#Testcasesuite">test case suite </a>can discriminate the
program from slight variants (mutants) of the program<span class=GramE>. </span>See
also <a href="#errorseeding">error seeding</a>. </p>

<p><b>5.127&nbsp;<a name=Nswitch></a>N-switch coverage: </b>The percentage of
sequences of <a href="#NTransitions">N-transitions </a>that have been <a
href="#Exercised">exercised</a> by a <a href="#Testcasesuite">test case suite</a>.
</p>

<p><b>5.128 N-switch testing:</b> A form of <a href="#Statetransition">state
transition testing </a>in which <a href="#Testcase">test cases </a>are designed
to execute all valid sequences of <a href="#NTransitions">N-transitions</a>. </p>

<p><b>5.129&nbsp;<a name=NTransitions></a>N-transitions: </b>A sequence of <span
class=GramE>N+1 transitions</span><b>.</b> </p>

<p><b>5.130&nbsp;<a name=Negative></a>negative testing: </b><a href="#Testing">Testing
</a>aimed at showing software does not work<span class=GramE>. </span>[<span
class=SpellE>Beizer</span>] </p>

<p><b>5.131&nbsp;<a name=Nonfunctional></a>non-functional requirements testing:
</b><a href="#Testing">Testing</a> of those requirements that do not relate to
functionality<span class=GramE>. i.e</span>. performance, usability, etc. </p>

<p><b>5.132&nbsp;<a name=Operationaltesting></a>operational <span class=SpellE>testing:<span
style='font-weight:normal'><a href="#Testing">Testing</a></span></span></b><span
class=MsoHyperlink> </span></p>

<span style='font-size:12.0pt;font-family:"Times New Roman";mso-fareast-font-family:
"Times New Roman";mso-ansi-language:EN-GB;mso-fareast-language:EN-GB;
mso-bidi-language:AR-SA'>conducted to evaluate a system or <a href="#Component">component</a>
in its operational environment<span class=GramE>. </span>[IEEE] </span>

<p><b>5.133 oracle</b>: A mechanism to produce the <a href="#Predictedoutcome">predicted
outcomes </a>to compare with the <a href="#Actualoutcome">actual outcomes </a>of
the software under test<span class=GramE>. </span>After [<span class=SpellE>adrion</span>]
</p>

<p><b>5.134&nbsp;<a name=Outcome></a>outcome: </b><a href="#Actualoutcome">Actual
outcome </a>or <a href="#Predictedoutcome">predicted outcome</a><span
class=GramE>. </span>This is the outcome of a test<span class=GramE>. </span>See
also <a href="#Branchoutcome">branch outcome</a>, <a href="#Conditionoutcome">condition
outcome </a>and <a href="#Decisionoutcome">decision outcome</a>. </p>

<p><b>5.135&nbsp;<a name=Output></a>output: </b>A variable (whether stored
within a <a href="#Component">component</a> or outside it) that is written to
by the <a href="#Component">component</a><b>.</b> </p>

<p><b>5.136<a name=Outputdomain></a> output domain: </b>The set of all possible
<a href="#Output">output</a>s. </p>

<p><b>5.137&nbsp;<a name=Outputvalue></a>output value: </b>An instance of an <a
href="#Output">output</a><b>.</b> </p>

<p><b>5.138 P-use:</b> See <a href="#Predicatedata">predicate data use</a>. </p>

<p><b>5.139 partition testing:</b> See <a href="#Equivalencepartiontest">equivalence
partition testing</a><span class=GramE>. </span>[<span class=SpellE>Beizer</span>]
</p>

<p><b>5.140&nbsp;<a name=Path></a><span class=GramE>path</span>: </b>A sequence
of <a href="#Executable">executable statements </a>of a <a href="#Component">component</a>,
from an <a href="#Entrypoint">entry point </a>to an <a href="#Exitpoint">exit
point</a><b>.</b> </p>

<p><b>5.141 path coverage:</b> The percentage of <a href="#Path">path</a>s in a
<a href="#Component">component</a> <a href="#Exercised">exercised</a> by a <a
href="#Testcasesuite">test case suite</a>. </p>

<p><b>5.142 path sensitizing: </b>Choosing a set of <a href="#Inputvalue">input
values </a>to force the execution of a <a href="#Component">component</a> to
take a given <a href="#Path">path.</a> </p>

<p><b>5.143 path testing:</b> <a href="#Testcasedes">A test case design
technique </a>in which <a href="#Testcase">test cases </a>are designed to
execute <a href="#Path">path</a>s of a <a href="#Component">component</a>. </p>

<p><b>5.144 performance testing:</b> <a href="#Testing">Testing</a> conducted
to evaluate the compliance of a system or <a href="#Component">component </a>with
specified performance requirements<span class=GramE>. </span>[IEEE] </p>

<p><b>5.145 portability testing:</b> <a href="#Testing">Testing</a> aimed at
demonstrating the software can be ported to specified hardware or software
platforms. </p>

<p><b>5.146&nbsp;<a name=Precondition></a>precondition: </b>Environmental and
state conditions which must be fulfilled before the <a href="#Component">component
</a>can be executed with a particular <a href="#Inputvalue">input value</a>. </p>

<p><b>5.147&nbsp;<a name=Predicate></a>predicate: </b>A logical expression
which evaluates to TRUE or FALSE, normally to direct the execution <a
href="#Path">path</a> in code. </p>

<p><b>5.148&nbsp;<a name=Predicatedata></a>predicate data use: </b>A <a
href="#Datause">data use </a>in a <a href="#Predicate">predicate</a>. </p>

<p><b>5.149&nbsp;<a name=Predictedoutcome></a>predicted outcome:</b> The <a
href="#behaviour">behaviour </a>predicted by the <a href="#Specification">specification
</a>of an object under specified conditions. </p>

<p><b>5.150 program instrumenter:</b> See <a href="#Instrumenter">instrumenter</a>.
</p>

<p><b>5.151 progressive testing:</b> <a href="#Testing">Testing</a> of new
features after <a href="#Regression">regression testing </a>of previous
features<span class=GramE>. </span>[<span class=SpellE>Beizer</span>] </p>

<p><b>5.152 <span class=GramE>pseudo-random</span>:</b> A series which appears
to be random but is in fact generated according to some prearranged sequence. </p>

<p><b>5.153 recovery testing:</b> <a href="#Testing">Testing</a> aimed at
verifying the system's ability to recover from varying degrees of <a
href="#Failure">failure.</a> </p>

<p><a name=Regression></a><b>5.154 regression testing: </b>Retesting of a
previously tested program following modification to ensure that <a href="#Fault">fault</a>s
have not been introduced or uncovered as a result of the changes made. </p>

<p><b>5.155 requirements-based testing:</b> Designing tests based on objectives
derived from requirements for the software component (e.g., tests that exercise
specific functions or probe the non-functional constraints such as performance
or security)<span class=GramE>. </span>See <a href="#functionaltest">functional
test case design.</a> </p>

<p><b>5.156 result:</b> See <a href="#Outcome">outcome</a>. </p>

<p><b>5.157&nbsp;<a name=Review></a>review: </b>A process or meeting during
which a work product, or set of work products, is presented to project
personnel, managers, users or other interested parties for comment or approval<span
class=GramE>. </span>[<span class=SpellE><span class=GramE>ieee</span></span>] </p>

<p><b>5.158 security testing:</b> <a href="#Testing">Testing</a> whether the
system meets its specified security objectives. </p>

<p><b>5.159 serviceability testing:</b> See <a href="#Maintainability">maintainability
testing</a>. </p>

<p><b>5.160 simple <span class=SpellE><span class=GramE>subpath</span></span>:</b>
A <span class=SpellE>subpath</span> of the <a href="#Controlflowgraph">control
flow graph </a>in which no program part is executed more than necessary. </p>

<p><b>5.161&nbsp;<a name=Simulation></a>simulation: </b>The representation of
selected behavioural characteristics of one physical or abstract system by
another system<span class=GramE>. [ISO 2382/1].</span> </p>

<p><b>5.162 simulator:</b> A device, computer program or system used during
software <a href="#Verification">verification, </a>which behaves or operates
like a given system when provided with a set of controlled <a href="#Input">input</a>s.
[<span class=SpellE>IEEE<span class=GramE>,do178b</span></span>] </p>

<p><b>5.163 source statement:</b> See <a href="#Statement">statement</a>. </p>

<p><b>5.164&nbsp;<a name=Specification></a>specification: </b>A description of
a <a href="#Component">component</a>'s function in terms of its <a
href="#Outputvalue">output values </a>for <a href="#Specifiedinput">specified
input </a>values under specified <a href="#Precondition">precondition</a>s. </p>

<p><b>5.165&nbsp;<a name=Specifiedinput></a>specified input: </b>An <a
href="#Input">input </a>for which the <a href="#Specification">specification </a>predicts
an <a href="#Outcome">outcome</a>. </p>

<p><b>5.166 state transition: </b>A transition between two allowable states of
a system or <a href="#Component">component</a>. </p>

<p><a name=Statetransition></a><b>5.167 state transition testing: </b>A <a
href="#Testcasedes">test case design technique </a>in which <a href="#Testcase">test
cases </a>are designed to execute <a href="#Statetransition">state transitions.</a>
</p>

<p><a name=Statement></a><b>5.168 <span class=GramE>statement</span>: </b>An
entity in a programming language which is typically the smallest indivisible
unit of execution. </p>

<p><b>5.169 statement coverage:</b> The percentage of <a href="#Executable">executable
statements </a>in a <a href="#Component">component</a> that have been <a
href="#Exercised">exercised</a> by a <a href="#Testcasesuite">test case suite.</a>
</p>

<p><b>5.170 statement testing:</b> A <a href="#Testcasedes">test case design
technique </a>for a <a href="#Component">component</a> in which <a
href="#Testcase">test cases </a>are designed to execute <a href="#Statement">statement</a>s.
</p>

<p><b>5.171&nbsp;<a name=Staticanaly></a>static <span class=GramE>analysis</span>:</b>
Analysis of a program carried out without executing the program. </p>

<p><span class=GramE><b>5.172 static analyzer:</b> A tool that carries out <a
href="#Staticanaly">static analysis</a>.</span> </p>

<p><b>5.173 static testing:</b> <a href="#Testing">Testing</a> of an object
without execution on a computer. </p>

<p><b>5.174<a name=statisticaltesting></a> statistical testing:</b> <a
href="#Testcasedes">A test case design technique </a>in which a model is used
of the statistical distribution of the <a href="#Input">input </a>to construct
representative <a href="#Testcase">test cases</a>. </p>

<p><b>5.175 storage testing:</b> <a href="#Testing">Testing </a>whether the
system meets its specified storage objectives. </p>

<p><b>5.176 stress testing:</b> <a href="#Testing">Testing</a> conducted to
evaluate a system or component at or beyond the limits of its specified
requirements<span class=GramE>. </span>[IEEE] </p>

<p><span class=GramE><b>5.177 structural coverage:</b> Coverage measures based
on the internal structure of the <a href="#Component">component</a>.</span> </p>

<p><b>5.178&nbsp;<a name=Structuraltestcase></a>structural test case <span
class=GramE>design</span>: </b><a href="#Testcase">Test case </a>selection that
is based on an analysis of the internal structure of the <a href="#Component">component</a>.
</p>

<p><b>5.179 structural testing:</b> See <a href="#Structuraltestcase">structural
test case design</a>. </p>

<p><b>5.180 structured basis testing:</b> A <a href="#Testcasedes">test case
design technique </a>in which <a href="#Testcase">test cases </a>are derived
from the code logic to achieve 100% <a href="#Branchcov">branch coverage</a>. </p>

<p><b>5.181 structured walkthrough:</b> See <a href="#Walkthough">walkthrough</a><a
name=Walkthrough></a>. </p>

<p><b>5.182&nbsp;<a name=Stub></a>stub: </b>A skeletal or special-purpose
implementation of a software module, used to develop or test a <a
href="#Component">component </a>that calls or is otherwise dependent on it<span
class=GramE>. After [IEEE].</span> </p>

<p><b>5.183&nbsp;<a name=Subpath></a><span class=SpellE><span class=GramE>subpath</span></span>:</b>
A sequence of <a href="#Executable">executable statements </a>within a <a
href="#Component">component</a>. </p>

<p><b>5.184 symbolic evaluation:</b> See <a href="#Symbolic">symbolic execution</a>.
</p>

<p><a name=Symbolic></a><b>5.185 symbolic <span class=GramE>execution</span>: </b>A
<a href="#Staticanaly">static analysis </a>technique that derives a symbolic
expression for program <a href="#Path">path</a>s. </p>

<p><b>5.186 syntax testing:</b> A <a href="#Testcasedes">test case design
technique </a>for a <a href="#Component">component</a> or system in which <a
href="#Testcase">test case </a>design is based upon the syntax of the <a
href="#Input">input</a>. </p>

<p><b>5.187<a name=systemtesting></a> system testing:</b> The process of <a
href="#Testing">testing </a>an integrated system to verify that it meets
specified requirements<span class=GramE>. </span>[Hetzel] </p>

<p><b>5.188 technical requirements testing:</b> See <a href="#Nonfunctional">non-functional
requirements testing.</a> </p>

<p><b>5.189 test automation:</b> The use of software to control the execution
of tests, the comparison of <a href="#Actualoutcome">actual outcomes </a>to <a
href="#Predictedoutcome">predicted outcomes</a>, the setting up of test <a
href="#Precondition">precondition</a>s, and other test control and test
reporting functions. </p>

<p><b>5.190&nbsp;<a name=Testcase></a>test case: </b>A set of <a href="#Input">input</a>s,
execution <a href="#Precondition">precondition</a>s, and <a href="#Expected">expected
outcomes </a>developed for a particular objective, such as to exercise a
particular program <a href="#Path">path </a>or to verify compliance with a
specific requirement<span class=GramE>. </span>After [<span class=SpellE>IEEE<span
class=GramE>,do178b</span></span>] </p>

<p><b>5.191&nbsp;<a name=Testcasedes></a>test case design technique: </b>A
method used to derive or select <a href="#Testcase">test cases</a>. </p>

<p><b>5.192&nbsp;<a name=Testcasesuite></a>test case suite:</b> A collection of
one or more <a href="#Testcase">test cases </a>for the software under test. </p>

<p><b>5.193&nbsp;<a name=Testcompar></a>test comparator: </b>A test tool that
compares the actual <a href="#Output">output</a>s produced by the software
under test with the expected <a href="#Output">output</a>s for that <a
href="#Testcase">test case</a>. </p>

<p><b>5.194&nbsp;<a name=Testcompletion></a>test completion criterion: </b>A
criterion for determining when planned <a href="#Testing">testing</a> is
complete, defined in terms of a <a href="#Testmeasurement">test measurement
technique</a>. </p>

<p><b>5.195&nbsp;<a name=Testcoverage></a>test coverage: </b>See <a
href="#Coverage">coverage</a>. </p>

<p><b>5.196&nbsp;<a name=Testdriver></a>test driver: </b>A program or test tool
used to execute software against a <a href="#Testcasesuite">test case suite</a>.
</p>

<p><b>5.197&nbsp;<a name=Testenviro></a>test environment: </b>A description of
the hardware and software environment in which the tests will be run, and any
other software with which the software under test interacts when under test
including <a href="#Stub">stub</a>s and <a href="#Testdriver">test drivers</a>.
</p>

<p><b>5.198&nbsp;<a name=Testexecution></a>test execution: </b>The processing
of a <a href="#Testcasesuite">test case suite </a>by the software under test,
producing an <a href="#Outcome">outcome.</a> </p>

<p><b>5.199 test execution technique:</b> The method used to perform the actual
<a href="#Testexecution">test execution</a>, e.g. manual, <a href="#captureplay">capture/playback
tool</a>, etc. </p>

<p><b>5.200 test generator:</b> A program that generates <a href="#Testcase">test
cases </a>in accordance to a specified strategy or heuristic<span class=GramE>.
After [<span class=SpellE>Beizer</span>].</span> </p>

<p><b>5.201&nbsp;<a name=Testharness></a>test harness: </b>A <a href="#Testing">testing
</a>tool that comprises a <a href="#Testdriver">test driver </a>and a <a
href="#Testcompar">test comparator</a>. </p>

<p><b>5.202&nbsp;<a name=Testmeasurement></a>test measurement technique: </b>A
method used to measure <a href="#Testcoverage">test coverage </a>items. </p>

<p><b>5.203 test outcome:</b> See <a href="#Outcome">outcome</a>. </p>

<p><b>5.204 test plan:</b> A record of the test planning process detailing the
degree of tester <span class=SpellE>indedendence</span>, the <a
href="#Testenviro">test environment</a>, the <a href="#Testcasedes">test case
design techniques </a>and <a href="#Testmeasurement">test measurement
techniques </a>to be used, and the rationale for their choice. </p>

<p><b>5.205&nbsp;<a name=Testproc></a>test procedure: </b>A document providing
detailed instructions for the execution of one or more <a href="#Testcase">test
cases</a>. </p>

<p><b>5.206 test records:</b> For each test, an unambiguous record of the
identities and versions of the <a href="#Component">component</a> under test,
the <a href="#Testspec">test specification</a>, and <a href="#Actualoutcome">actual
outcome</a>. </p>

<p><b>5.207 test script:</b> Commonly used to refer to the automated <a
href="#Testproc">test procedure </a>used with a <a href="#Testharness">test
harness</a>. </p>

<p><a name=Testspec></a><b>5.208 test specification: </b>For each <a
href="#Testcase">test case</a>, the <a href="#Coverageitem">coverage item</a>,
the initial state of the software under test, the <a href="#Input">input</a>,
and the <a href="#Predictedoutcome">predicted outcome</a>. </p>

<p><b>5.209 test target:</b> A set of <a href="#Testcompletion">test completion
criteria</a>. </p>

<p><b>5.210</b><a name=Testing></a> <b>testing:</b> The process of exercising
software to verify that it satisfies specified requirements and to detect <a
href="#Error">error</a>s<span class=GramE>. </span>After [<span class=SpellE>do178b</span>]
</p>

<p><b>5.211 thread testing:</b> A variation of <a href="#Topdown">top-down
testing </a>where the progressive <a href="#Integration">integration</a> of <a
href="#Component">component</a>s follows the implementation of subsets of the
requirements, as opposed to the <a href="#Integration">integration </a>of <a
href="#Component">component</a>s by successively lower levels. </p>

<p><b>5.212&nbsp;<a name=Topdown></a>top-down testing: </b>An approach to <a
href="#Actualoutcome">integration testing </a>where the <a href="#Component">component</a>
at the top of the <a href="#Component">component </a>hierarchy is tested first,
with lower level <a href="#Component">component</a>s being simulated by <a
href="#Stub">stub</a>s. Tested <a href="#Component">component</a>s are then
used to test lower level <a href="#Component">component</a>s<span class=GramE>.
</span>The process is repeated until the lowest level <a href="#Component">component</a>s
<span class=GramE>have</span> been tested. </p>

<p><b>5.213 <span class=GramE>unit</span> testing:</b> See <a
href="#Componenttest">component testing</a>. </p>

<p><b>5.214 usability testing:</b> <a href="#Testing">Testing</a> the ease with
which users can learn and use a product. </p>

<p><b>5.215 <span class=GramE>validation</span>:</b> Determination of the c<a
href="#Correctness">orrectness</a> of the products of software development with
respect to the user needs and requirements.</p>

<p style='margin-left:30.1pt'>NOTE: The definition in BS 7925-1:1998 reads:
confirmation by examination and provision of objective evidence that the
particular requirements for a specific intended use have been fulfilled</p>

<p><a name=Verification></a><b>5.216 verification: </b>The process of
evaluating a system or <a href="#Component">component</a> to determine whether
the products of the given development phase satisfy the conditions imposed at
the start of that phase<span class=GramE>. </span>[IEEE] </p>

<p style='margin-left:30.1pt'>NOTE: The definition in BS 7925-1:1998 reads:
confirmation by examination and provision of objective evidence that specified
requirements have been fulfilled</p>

<p><b>5.217 volume testing:</b> <a href="#Testing">Testing</a> where the system
is subjected to large volumes of data. </p>

<p><a name=Walkthough></a><b>5.218 walkthrough: </b>A <a href="#Review">review</a>
of requirements, designs or code characterized by the author of the object
under <a href="#Review">review </a>guiding the progression of the <a
href="#Review">review</a>. </p>

<p><b>5.219 white box testing</b>: See <a href="#Structuraltestcase">structural
test case design</a>.&nbsp; </p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h3><a name=AnnexA></a>Annex <span class=GramE>A</span> (informative)</h3>

<p class=MsoNormal><b>Index of sources</b> </p>

<p>The following non-normative sources were used in constructing this glossary.
</p>

<p>[Abbott<span class=GramE>] </span>J Abbot, <i>Software Testing Techniques</i>,
<span class=SpellE>NCC</span> Publications, 1986. </p>

<p>[<span class=SpellE>Adrion</span><span class=GramE>] </span>W R <span
class=SpellE>Adrion</span>, M A <span class=SpellE>Branstad</span> and J C <span
class=SpellE>Cherniabsky</span><span class=GramE>. <i>Validation, Verification
and Testing of Computer Software</i>, Computing Surveys, <span class=SpellE>Vol</span>
14, No 2, June 1982.</span> </p>

<p>[BCS<span class=GramE>] </span><i>A Glossary of Computing Terms</i>, The
British Computer Society, 7th edition, ISBN 0-273-03645-9. </p>

<p>[<span class=SpellE>Beizer</span><span class=GramE>] </span>B <span
class=SpellE>Beizer</span><span class=GramE>. </span><i>Software Testing
Techniques</i>, van <span class=SpellE>Nostrand</span> Reinhold, 1990, ISBN
0-442-20672-0. </p>

<p>[Chow<span class=GramE>] </span>T S Chow, <i>Testing Software Design
Modelled by Finite-Sate Machines</i>, IEEE Transactions on Software
Engineering, <span class=SpellE>Vol</span> SE-4, No 3, May 1978. </p>

<p>[DO-178B<span class=GramE>] </span><i>Software Considerations in Airborne
Systems and Equipment Certification</i><span class=GramE>. Issued in the </span><st1:country-region><st1:place><span
  class=GramE>USA</span></st1:place></st1:country-region><span class=GramE> by
the Requirements and Technical Concepts for Aviation (document <span
class=SpellE>RTCA</span> <span class=SpellE>SC167</span>/DO-178B) and in </span><st1:place><span
 class=GramE>Europe</span></st1:place><span class=GramE> by the European
Organization for Civil Aviation Electronics (<span class=SpellE>EUROCAE</span>
document ED-12B), December 1992.</span> </p>

<p>[Fenton<span class=GramE>] N </span><st1:place><span class=GramE>E Fenton</span></st1:place><span
class=GramE>, <i>Software Metrics</i>, Chapman \&amp; Hall, 1991.</span> </p>

<p>[Graham<span class=GramE>] D Graham and T <span class=SpellE>Gilb</span>, <i>Software
Inspection</i>, Addison-Wesley, 1993, ISBN 0-201-63181-4.</span> </p>

<p>[Hetzel<span class=GramE>] W C Hetzel, <i>The complete guide to software
testing</i>, 2nd edition, QED Information Sciences, 1988.</span> </p>

<p>[IEEE<span class=GramE>] </span><i>IEEE Standard Glossary of Software
Engineering Terminology</i>, IEEE <span class=GramE>Std</span> 610.12-1990. </p>

<p>[Myers<span class=GramE>] </span>G J Myers, <span class=GramE><i>The</i></span><i>
Art of Software Testing</i>, Wiley, 1979.&nbsp; </p>

<div class=MsoNormal align=center style='text-align:center'>

<hr size=2 width="100%" align=center>

</div>

<h3><a name=AnnexB></a>Annex B (informative)</h3>

<p class=MsoNormal><b>Document Details</b> </p>

<p><b>B. 1 Method of commenting on this draft</b> </p>

<p>Comments are invited on this draft so that the glossary can be improved to
satisfy the requirements of an ISO standard. </p>

<p>When making a comment, be sure to include the following information: </p>

<p>Your name and address; </p>

<p>The version number of the glossary (currently 6.2); </p>

<p>Exact part of the glossary; </p>

<p><span class=GramE>Supporting information, such as the reason for a proposed
change, or the reference to the use of a term.</span> </p>

<p>You can submit comments in a variety of ways, which in order of preference
are as follows: </p>

<ol start=1 type=1>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo2;tab-stops:list 36.0pt'>By E-mail to
     reids@rmcs.cranfield.ac.uk;</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo2;tab-stops:list 36.0pt'>By post to S C Reid,
     SEAS/CISE, <st1:place><st1:PlaceName>Cranfield</st1:PlaceName> <st1:PlaceType>University</st1:PlaceType></st1:place>,
     RMCS, Shrivenham, Swindon Wilts SN6 8LA, <st1:country-region><st1:place>UK</st1:place></st1:country-region>;</li>
</ol>

<p style='margin-left:36.0pt'><br>
By FAX to +44 (0) 1793 783192, marked for the attention of Stuart Reid.</p>

<p class=MsoNormal><span class=GramE><b>B. 2 Status</b></span> </p>

<p><span class=GramE>Working draft for the BCS Specialist Interest Group in
Software Testing.</span> </p>

</div>

</body>

</html>
